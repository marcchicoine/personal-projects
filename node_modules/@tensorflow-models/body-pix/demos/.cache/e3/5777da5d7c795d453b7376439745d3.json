{"id":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js.map","includedInParent":true,"mtime":1613671120535},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"@tensorflow/tfjs-core","loc":{"line":19,"column":17},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../keypoints","loc":{"line":20,"column":26},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/keypoints.js"},{"name":"./util","loc":{"line":21,"column":21},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_masks_webgl.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/util.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs-core\");\nvar keypoints_1 = require(\"../keypoints\");\nvar util_1 = require(\"./util\");\nfunction decodeMultipleMasksWebGl(segmentation, longOffsets, posesAboveScore, height, width, stride, _a, padding, refineSteps, minKptScore, maxNumPeople) {\n    var inHeight = _a[0], inWidth = _a[1];\n    // The height/width of the image/canvas itself.\n    var _b = segmentation.shape, origHeight = _b[0], origWidth = _b[1];\n    // The height/width of the output of the model.\n    var _c = longOffsets.shape.slice(0, 2), outHeight = _c[0], outWidth = _c[1];\n    var shapedLongOffsets = tf.reshape(longOffsets, [outHeight, outWidth, 2, keypoints_1.NUM_KEYPOINTS]);\n    // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\n    // the last 3 coordinates correspond to the score, h and w coordinate of that\n    // keypoint.\n    var poseVals = new Float32Array(maxNumPeople * keypoints_1.NUM_KEYPOINTS * 3).fill(0.0);\n    for (var i = 0; i < posesAboveScore.length; i++) {\n        var poseOffset = i * keypoints_1.NUM_KEYPOINTS * 3;\n        var pose = posesAboveScore[i];\n        for (var kp = 0; kp < keypoints_1.NUM_KEYPOINTS; kp++) {\n            var keypoint = pose.keypoints[kp];\n            var offset = poseOffset + kp * 3;\n            poseVals[offset] = keypoint.score;\n            poseVals[offset + 1] = keypoint.position.y;\n            poseVals[offset + 2] = keypoint.position.x;\n        }\n    }\n    var _d = util_1.getScale([height, width], [inHeight, inWidth], padding), scaleX = _d[0], scaleY = _d[1];\n    var posesTensor = tf.tensor(poseVals, [maxNumPeople, keypoints_1.NUM_KEYPOINTS, 3]);\n    var padT = padding.top, padL = padding.left;\n    var program = {\n        variableNames: ['segmentation', 'longOffsets', 'poses'],\n        outputShape: [origHeight, origWidth],\n        userCode: \"\\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\\n    }\\n\\n    float convertToPositionInOutputFloat(\\n        int pos, int pad, float scale, int stride) {\\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\\n    }\\n\\n    float dist(float x1, float y1, float x2, float y2) {\\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\\n    }\\n\\n    float sampleLongOffsets(float h, float w, int d, int k) {\\n      float fh = fract(h);\\n      float fw = fract(w);\\n      int clH = int(ceil(h));\\n      int clW = int(ceil(w));\\n      int flH = int(floor(h));\\n      int flW = int(floor(w));\\n      float o11 = getLongOffsets(flH, flW, d, k);\\n      float o12 = getLongOffsets(flH, clW, d, k);\\n      float o21 = getLongOffsets(clH, flW, d, k);\\n      float o22 = getLongOffsets(clH, clW, d, k);\\n      float o1 = mix(o11, o12, fw);\\n      float o2 = mix(o21, o22, fw);\\n      return mix(o1, o2, fh);\\n    }\\n\\n    int findNearestPose(int h, int w) {\\n      float prob = getSegmentation(h, w);\\n      if (prob < 1.0) {\\n        return -1;\\n      }\\n\\n      // Done(Tyler): convert from output space h/w to strided space.\\n      float stridedH = convertToPositionInOutputFloat(\\n        h, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n      float stridedW = convertToPositionInOutputFloat(\\n        w, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n      float minDist = 1000000.0;\\n      int iMin = -1;\\n      for (int i = 0; i < \" + maxNumPeople + \"; i++) {\\n        float curDistSum = 0.0;\\n        int numKpt = 0;\\n        for (int k = 0; k < \" + keypoints_1.NUM_KEYPOINTS + \"; k++) {\\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\\n\\n          float y = float(h) + dy;\\n          float x = float(w) + dx;\\n\\n          for (int s = 0; s < \" + refineSteps + \"; s++) {\\n            int yRounded = round(min(y, float(\" + (height - 1.0) + \")));\\n            int xRounded = round(min(x, float(\" + (width - 1.0) + \")));\\n\\n            float yStrided = convertToPositionInOutputFloat(\\n              yRounded, \" + padT + \", \" + scaleY + \", \" + stride + \");\\n            float xStrided = convertToPositionInOutputFloat(\\n              xRounded, \" + padL + \", \" + scaleX + \", \" + stride + \");\\n\\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\\n\\n            y = y + dy;\\n            x = x + dx;\\n          }\\n\\n          float poseScore = getPoses(i, k, 0);\\n          float poseY = getPoses(i, k, 1);\\n          float poseX = getPoses(i, k, 2);\\n          if (poseScore > \" + minKptScore + \") {\\n            numKpt = numKpt + 1;\\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\\n          }\\n        }\\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\\n          minDist = curDistSum / float(numKpt);\\n          iMin = i;\\n        }\\n      }\\n      return iMin;\\n    }\\n\\n    void main() {\\n        ivec2 coords = getOutputCoords();\\n        int nearestPose = findNearestPose(coords[0], coords[1]);\\n        setOutput(float(nearestPose));\\n      }\\n  \"\n    };\n    var webglBackend = tf.backend();\n    return webglBackend.compileAndRun(program, [segmentation, shapedLongOffsets, posesTensor]);\n}\nexports.decodeMultipleMasksWebGl = decodeMultipleMasksWebGl;\n"},"sourceMaps":{"js":{"version":3,"file":"decode_multiple_masks_webgl.js","sourceRoot":"","sources":["../../src/multi_person/decode_multiple_masks_webgl.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,0CAA4C;AAG5C,0CAA2C;AAE3C,+BAAgC;AAEhC,SAAgB,wBAAwB,CACpC,YAAyB,EAAE,WAAwB,EACnD,eAAuB,EAAE,MAAc,EAAE,KAAa,EAAE,MAAc,EACtE,EAAqC,EAAE,OAAgB,EACvD,WAAmB,EAAE,WAAmB,EACxC,YAAoB;QAFnB,gBAAQ,EAAE,eAAO;IAGpB,+CAA+C;IACzC,IAAA,uBAA4C,EAA3C,kBAAU,EAAE,iBAA+B,CAAC;IACnD,+CAA+C;IACzC,IAAA,kCAAqD,EAApD,iBAAS,EAAE,gBAAyC,CAAC;IAE5D,IAAM,iBAAiB,GACnB,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,yBAAa,CAAC,CAAC,CAAC;IAErE,qEAAqE;IACrE,6EAA6E;IAC7E,YAAY;IACZ,IAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,YAAY,GAAG,yBAAa,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/C,IAAM,UAAU,GAAG,CAAC,GAAG,yBAAa,GAAG,CAAC,CAAC;QACzC,IAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAChC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,yBAAa,EAAE,EAAE,EAAE,EAAE;YACzC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YACpC,IAAM,MAAM,GAAG,UAAU,GAAG,EAAE,GAAG,CAAC,CAAC;YACnC,QAAQ,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAClC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3C,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC5C;KACF;IAEK,IAAA,mEACqD,EADpD,cAAM,EAAE,cAC4C,CAAC;IAE5D,IAAM,WAAW,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE,yBAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IAEnE,IAAA,kBAAS,EAAE,mBAAU,CAAY;IAExC,IAAM,OAAO,GAA0B;QACrC,aAAa,EAAE,CAAC,cAAc,EAAE,aAAa,EAAE,OAAO,CAAC;QACvD,WAAW,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;QACpC,QAAQ,EAAE,kyCAsCD,IAAI,UAAK,MAAM,UAAK,MAAM,+EAE1B,IAAI,UAAK,MAAM,UAAK,MAAM,gGAIX,YAAY,wGAGV,yBAAa,kQAOX,WAAW,iEACK,MAAM,GAAG,GAAG,8DACZ,KAAK,GAAG,GAAG,uGAGjC,IAAI,UAAK,MAAM,UAAK,MAAM,kGAE1B,IAAI,UAAK,MAAM,UAAK,MAAM,6XAYxB,WAAW,kfAkBpC;KACA,CAAC;IACF,IAAM,YAAY,GAAG,EAAE,CAAC,OAAO,EAA+B,CAAC;IAC/D,OAAO,YAAY,CAAC,aAAa,CAC7B,OAAO,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC,CAAC;AAC/D,CAAC;AAxID,4DAwIC","sourcesContent":[null]}},"error":null,"hash":"a4fa9ba1323b77d392439afd1154b495","cacheData":{"env":{}}}