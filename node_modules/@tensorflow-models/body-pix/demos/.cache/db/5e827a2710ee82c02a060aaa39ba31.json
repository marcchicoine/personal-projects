{"id":"QNLw","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js.map","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1613524214681}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeBilinearPackedProgram=void 0;class e{constructor(e,o,t,n,c){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,u,s,l]=e;this.outputShape=[r,o,t,l];const C=[n&&o>1?u-1:u,n&&t>1?s-1:s],a=[n&&o>1?o-1:o,n&&t>1?t-1:t];let i;i=c?\"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)\":\"vec3(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          ${C[0]/a[0]},\\n          ${C[1]/a[1]},\\n          ${C[1]/a[1]});\\n      const vec3 inputShapeRC = vec3(${u}.0, ${s}.0,\\n                                     ${s}.0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = ${i};\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < ${l-1};\\n        bool hasNextRow = coords.z < ${t-1};\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    `}}exports.ResizeBilinearPackedProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":0}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":13}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":20}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":35}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":43}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":56}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":57}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":64}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":68}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":76}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":109}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":111}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":117}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":119}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":131}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":28,"column":52},"generated":{"line":1,"column":133}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":135}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":137}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":29,"column":47},"generated":{"line":1,"column":139}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":142}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":147}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":161}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":162}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":167}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":172}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":17},"generated":{"line":1,"column":186}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":188}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":193}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":17},"generated":{"line":1,"column":207}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":209}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":214}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":26},"generated":{"line":1,"column":226}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":229}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":11},"generated":{"line":1,"column":235}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":1,"column":237}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":29},"generated":{"line":1,"column":239}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":39},"generated":{"line":1,"column":241}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":48},"generated":{"line":1,"column":244}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":9},"generated":{"line":1,"column":246}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":9},"generated":{"line":1,"column":251}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":1,"column":263}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":24},"generated":{"line":1,"column":264}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":31},"generated":{"line":1,"column":266}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":42},"generated":{"line":1,"column":268}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":52},"generated":{"line":1,"column":270}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":273}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":279}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":46},"generated":{"line":1,"column":281}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":7},"generated":{"line":1,"column":282}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":23},"generated":{"line":1,"column":285}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":35},"generated":{"line":1,"column":287}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":40},"generated":{"line":1,"column":289}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":52},"generated":{"line":1,"column":291}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":56},"generated":{"line":1,"column":293}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":7},"generated":{"line":1,"column":295}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":1,"column":298}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":34},"generated":{"line":1,"column":300}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":39},"generated":{"line":1,"column":302}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":50},"generated":{"line":1,"column":304}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":54},"generated":{"line":1,"column":306}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":38,"column":10},"generated":{"line":1,"column":309}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":38,"column":47},"generated":{"line":1,"column":311}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":7},"generated":{"line":1,"column":312}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":23},"generated":{"line":1,"column":315}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":35},"generated":{"line":1,"column":317}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":40},"generated":{"line":1,"column":319}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":52},"generated":{"line":1,"column":321}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":56},"generated":{"line":1,"column":323}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":7},"generated":{"line":1,"column":325}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":23},"generated":{"line":1,"column":328}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":1,"column":330}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":1,"column":332}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":50},"generated":{"line":1,"column":334}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":54},"generated":{"line":1,"column":336}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":1,"column":339}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":1,"column":343}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":6},"generated":{"line":1,"column":345}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":1,"column":347}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":26},"generated":{"line":1,"column":349}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":48,"column":26},"generated":{"line":1,"column":421}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":51,"column":9},"generated":{"line":1,"column":467}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":51,"column":9},"generated":{"line":1,"column":472}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":53,"column":12},"generated":{"line":1,"column":554}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":53,"column":28},"generated":{"line":1,"column":556}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":53,"column":33},"generated":{"line":1,"column":559}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":53,"column":50},"generated":{"line":1,"column":561}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":1,"column":579}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":54,"column":28},"generated":{"line":1,"column":581}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":54,"column":33},"generated":{"line":1,"column":584}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":54,"column":50},"generated":{"line":1,"column":586}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":55,"column":12},"generated":{"line":1,"column":604}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":55,"column":28},"generated":{"line":1,"column":606}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":55,"column":33},"generated":{"line":1,"column":609}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":55,"column":50},"generated":{"line":1,"column":611}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":56,"column":39},"generated":{"line":1,"column":657}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":56,"column":55},"generated":{"line":1,"column":665}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":57,"column":39},"generated":{"line":1,"column":711}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":71,"column":35},"generated":{"line":1,"column":1142}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":79,"column":32},"generated":{"line":1,"column":1482}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":79,"column":40},"generated":{"line":1,"column":1484}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":80,"column":39},"generated":{"line":1,"column":1528}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":80,"column":50},"generated":{"line":1,"column":1530}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3599}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3607}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3635}}],"sources":{"../src/resize_bilinear_packed_gpu.ts":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"3964d71a404879b69341814961188410","cacheData":{"env":{}}}