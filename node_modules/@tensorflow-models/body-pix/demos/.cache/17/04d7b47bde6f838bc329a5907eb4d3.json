{"id":"node_modules/@tensorflow-models/body-pix/base_model.js","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/base_model.js.map","includedInParent":true,"mtime":1613671120439},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"@tensorflow/tfjs-core","loc":{"line":19,"column":17},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/base_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-core/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs-core\");\n/**\n * BodyPix supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such BodyPix base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to BodyPix.\n */\nvar BaseModel = /** @class */ (function () {\n    function BaseModel(model, outputStride) {\n        this.model = model;\n        this.outputStride = outputStride;\n        var inputShape = this.model.inputs[0].shape;\n        tf.util.assert((inputShape[1] === -1) && (inputShape[2] === -1), function () { return \"Input shape [\" + inputShape[1] + \", \" + inputShape[2] + \"] \" +\n            \"must both be equal to or -1\"; });\n    }\n    /**\n     * Predicts intermediate Tensor representations.\n     *\n     * @param input The input RGB image of the base model.\n     * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n     *\n     * @return A dictionary of base model's intermediate predictions.\n     * The returned dictionary should contains the following elements:\n     * - heatmapScores: A Tensor3D that represents the keypoint heatmap scores.\n     * - offsets: A Tensor3D that represents the offsets.\n     * - displacementFwd: A Tensor3D that represents the forward displacement.\n     * - displacementBwd: A Tensor3D that represents the backward displacement.\n     * - segmentation: A Tensor3D that represents the segmentation of all\n     * people.\n     * - longOffsets: A Tensor3D that represents the long offsets used for\n     * instance grouping.\n     * - partHeatmaps: A Tensor3D that represents the body part segmentation.\n     */\n    BaseModel.prototype.predict = function (input) {\n        var _this = this;\n        return tf.tidy(function () {\n            var asFloat = _this.preprocessInput(tf.cast(input, 'float32'));\n            var asBatch = tf.expandDims(asFloat, 0);\n            var results = _this.model.predict(asBatch);\n            var results3d = results.map(function (y) { return tf.squeeze(y, [0]); });\n            var namedResults = _this.nameOutputResults(results3d);\n            return {\n                heatmapScores: tf.sigmoid(namedResults.heatmap),\n                offsets: namedResults.offsets,\n                displacementFwd: namedResults.displacementFwd,\n                displacementBwd: namedResults.displacementBwd,\n                segmentation: namedResults.segmentation,\n                partHeatmaps: namedResults.partHeatmaps,\n                longOffsets: namedResults.longOffsets,\n                partOffsets: namedResults.partOffsets\n            };\n        });\n    };\n    /**\n     * Releases the CPU and GPU memory allocated by the model.\n     */\n    BaseModel.prototype.dispose = function () {\n        this.model.dispose();\n    };\n    return BaseModel;\n}());\nexports.BaseModel = BaseModel;\n"},"sourceMaps":{"js":{"version":3,"file":"base_model.js","sourceRoot":"","sources":["../src/base_model.ts"],"names":[],"mappings":";AACA;;;;;;;;;;;;;;;GAeG;;AAGH,0CAA4C;AAG5C;;;;;;;;GAQG;AACH;IACE,mBACuB,KAAwB,EAC3B,YAAiC;QAD9B,UAAK,GAAL,KAAK,CAAmB;QAC3B,iBAAY,GAAZ,YAAY,CAAqB;QACnD,IAAM,UAAU,GACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAyC,CAAC;QACnE,EAAE,CAAC,IAAI,CAAC,MAAM,CACV,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAChD,cAAM,OAAA,kBAAgB,UAAU,CAAC,CAAC,CAAC,UAAK,UAAU,CAAC,CAAC,CAAC,OAAI;YACrD,6BAA6B,EAD3B,CAC2B,CAAC,CAAC;IACzC,CAAC;IAID;;;;;;;;;;;;;;;;;OAiBG;IACH,2BAAO,GAAP,UAAQ,KAAkB;QAA1B,iBA4BC;QAlBC,OAAO,EAAE,CAAC,IAAI,CAAC;YACb,IAAM,OAAO,GAAG,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;YAChE,IAAM,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC1C,IAAM,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAkB,CAAC;YAC7D,IAAM,SAAS,GAAkB,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAlB,CAAkB,CAAC,CAAC;YACtE,IAAM,YAAY,GAAG,KAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEvD,OAAO;gBACL,aAAa,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC;gBAC/C,OAAO,EAAE,YAAY,CAAC,OAAO;gBAC7B,eAAe,EAAE,YAAY,CAAC,eAAe;gBAC7C,eAAe,EAAE,YAAY,CAAC,eAAe;gBAC7C,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,WAAW,EAAE,YAAY,CAAC,WAAW;aACtC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAeD;;OAEG;IACH,2BAAO,GAAP;QACE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IACH,gBAAC;AAAD,CAAC,AAjFD,IAiFC;AAjFqB,8BAAS","sourcesContent":[null]}},"error":null,"hash":"2bfc1a05dc2f0942ad5caa9c770e68bc","cacheData":{"env":{}}}