{"id":"node_modules/@tensorflow-models/body-pix/body_pix_model.js","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js.map","includedInParent":true,"mtime":1613671120693},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"@tensorflow/tfjs-converter","loc":{"line":65,"column":21},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-converter/dist/index.js"},{"name":"@tensorflow/tfjs-core","loc":{"line":66,"column":17},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"./decode_part_map","loc":{"line":67,"column":32},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/decode_part_map.js"},{"name":"./mobilenet","loc":{"line":68,"column":26},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/mobilenet.js"},{"name":"./multi_person/decode_instance_masks","loc":{"line":69,"column":38},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_instance_masks.js"},{"name":"./multi_person/decode_multiple_poses","loc":{"line":70,"column":38},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js"},{"name":"./resnet","loc":{"line":71,"column":23},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/resnet.js"},{"name":"./saved_models","loc":{"line":72,"column":29},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/saved_models.js"},{"name":"./util","loc":{"line":73,"column":21},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/body_pix_model.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/util.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfconv = require(\"@tensorflow/tfjs-converter\");\nvar tf = require(\"@tensorflow/tfjs-core\");\nvar decode_part_map_1 = require(\"./decode_part_map\");\nvar mobilenet_1 = require(\"./mobilenet\");\nvar decode_instance_masks_1 = require(\"./multi_person/decode_instance_masks\");\nvar decode_multiple_poses_1 = require(\"./multi_person/decode_multiple_poses\");\nvar resnet_1 = require(\"./resnet\");\nvar saved_models_1 = require(\"./saved_models\");\nvar util_1 = require(\"./util\");\nvar APPLY_SIGMOID_ACTIVATION = true;\nvar FLIP_POSES_AFTER_SCALING = false;\n// The default configuration for loading MobileNetV1 based BodyPix.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 4,\n// } as ModelConfig;\n// ```\nvar MOBILENET_V1_CONFIG = {\n    architecture: 'MobileNetV1',\n    outputStride: 16,\n    quantBytes: 4,\n    multiplier: 0.75,\n};\nvar VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];\nvar VALID_STRIDE = {\n    'MobileNetV1': [8, 16, 32],\n    'ResNet50': [32, 16]\n};\nvar VALID_MULTIPLIER = {\n    'MobileNetV1': [0.50, 0.75, 1.0],\n    'ResNet50': [1.0]\n};\nvar VALID_QUANT_BYTES = [1, 2, 4];\nfunction validateModelConfig(config) {\n    config = config || MOBILENET_V1_CONFIG;\n    if (config.architecture == null) {\n        config.architecture = 'MobileNetV1';\n    }\n    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n        throw new Error(\"Invalid architecture \" + config.architecture + \". \" +\n            (\"Should be one of \" + VALID_ARCHITECTURE));\n    }\n    if (config.outputStride == null) {\n        config.outputStride = 16;\n    }\n    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n        throw new Error(\"Invalid outputStride \" + config.outputStride + \". \" +\n            (\"Should be one of \" + VALID_STRIDE[config.architecture] + \" \") +\n            (\"for architecture \" + config.architecture + \".\"));\n    }\n    if (config.multiplier == null) {\n        config.multiplier = 1.0;\n    }\n    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n        throw new Error(\"Invalid multiplier \" + config.multiplier + \". \" +\n            (\"Should be one of \" + VALID_MULTIPLIER[config.architecture] + \" \") +\n            (\"for architecture \" + config.architecture + \".\"));\n    }\n    if (config.quantBytes == null) {\n        config.quantBytes = 4;\n    }\n    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n        throw new Error(\"Invalid quantBytes \" + config.quantBytes + \". \" +\n            (\"Should be one of \" + VALID_QUANT_BYTES + \" \") +\n            (\"for architecture \" + config.architecture + \".\"));\n    }\n    return config;\n}\nexports.PERSON_INFERENCE_CONFIG = {\n    flipHorizontal: false,\n    internalResolution: 'medium',\n    segmentationThreshold: 0.7,\n    maxDetections: 10,\n    scoreThreshold: 0.4,\n    nmsRadius: 20,\n};\nexports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG = {\n    flipHorizontal: false,\n    internalResolution: 'medium',\n    segmentationThreshold: 0.7,\n    maxDetections: 10,\n    scoreThreshold: 0.4,\n    nmsRadius: 20,\n    minKeypointScore: 0.3,\n    refineSteps: 10\n};\nfunction validatePersonInferenceConfig(config) {\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius;\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\n            \"Should be in range [0.0, 1.0]\");\n    }\n    if (maxDetections <= 0) {\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\n            \"Should be > 0\");\n    }\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\n            \"Should be in range [0.0, 1.0]\");\n    }\n    if (nmsRadius <= 0) {\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\n    }\n}\nfunction validateMultiPersonInstanceInferenceConfig(config) {\n    var segmentationThreshold = config.segmentationThreshold, maxDetections = config.maxDetections, scoreThreshold = config.scoreThreshold, nmsRadius = config.nmsRadius, minKeypointScore = config.minKeypointScore, refineSteps = config.refineSteps;\n    if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n        throw new Error(\"segmentationThreshold \" + segmentationThreshold + \". \" +\n            \"Should be in range [0.0, 1.0]\");\n    }\n    if (maxDetections <= 0) {\n        throw new Error(\"Invalid maxDetections \" + maxDetections + \". \" +\n            \"Should be > 0\");\n    }\n    if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n        throw new Error(\"Invalid scoreThreshold \" + scoreThreshold + \". \" +\n            \"Should be in range [0.0, 1.0]\");\n    }\n    if (nmsRadius <= 0) {\n        throw new Error(\"Invalid nmsRadius \" + nmsRadius + \".\");\n    }\n    if (minKeypointScore < 0 || minKeypointScore > 1) {\n        throw new Error(\"Invalid minKeypointScore \" + minKeypointScore + \".\" +\n            \"Should be in range [0.0, 1.0]\");\n    }\n    if (refineSteps <= 0 || refineSteps > 20) {\n        throw new Error(\"Invalid refineSteps \" + refineSteps + \".\" +\n            \"Should be in range [1, 20]\");\n    }\n}\nvar BodyPix = /** @class */ (function () {\n    function BodyPix(net) {\n        this.baseModel = net;\n    }\n    BodyPix.prototype.predictForPersonSegmentation = function (input) {\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\n        return {\n            segmentLogits: segmentation,\n            heatmapScores: heatmapScores,\n            offsets: offsets,\n            displacementFwd: displacementFwd,\n            displacementBwd: displacementBwd,\n        };\n    };\n    BodyPix.prototype.predictForPersonSegmentationAndPart = function (input) {\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, partHeatmaps = _a.partHeatmaps, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\n        return {\n            segmentLogits: segmentation,\n            partHeatmapLogits: partHeatmaps,\n            heatmapScores: heatmapScores,\n            offsets: offsets,\n            displacementFwd: displacementFwd,\n            displacementBwd: displacementBwd,\n        };\n    };\n    BodyPix.prototype.predictForMultiPersonInstanceSegmentationAndPart = function (input) {\n        var _a = this.baseModel.predict(input), segmentation = _a.segmentation, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\n        return {\n            segmentLogits: segmentation,\n            longOffsets: longOffsets,\n            heatmapScores: heatmapScores,\n            offsets: offsets,\n            displacementFwd: displacementFwd,\n            displacementBwd: displacementBwd,\n            partHeatmaps: partHeatmaps\n        };\n    };\n    /**\n     * Given an image with people, returns a dictionary of all intermediate\n     * tensors including: 1) a binary array with 1 for the pixels that are part of\n     * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\n     *\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n     * The input image to feed through the network.\n     *\n     * @param internalResolution Defaults to 'medium'. The internal resolution\n     * that the input is resized to before inference. The larger the\n     * internalResolution the more accurate the model at the cost of slower\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n     *\n     * @param segmentationThreshold The minimum that segmentation values must have\n     * to be considered part of the person. Affects the generation of the\n     * segmentation mask.\n     *\n     * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\n     * and `padding`:\n     * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\n     * person, and 0 otherwise. The width and height correspond to the same\n     * dimensions of the input image.\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n     * pose estimation decoding.\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\n     * estimation decoding.\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\n     * by pose estimation decoding.\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n     * by pose estimation decoding.\n     * - `padding`: The padding (unit pixels) being applied to the input image\n     * before it is fed into the model.\n     */\n    BodyPix.prototype.segmentPersonActivation = function (input, internalResolution, segmentationThreshold) {\n        var _this = this;\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n        var _c = tf.tidy(function () {\n            var _a = _this.predictForPersonSegmentation(resized), segmentLogits = _a.segmentLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n            return {\n                segmentation: decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold),\n                heatmapScores: heatmapScores,\n                offsets: offsets,\n                displacementFwd: displacementFwd,\n                displacementBwd: displacementBwd,\n            };\n        }), segmentation = _c.segmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\n        resized.dispose();\n        return {\n            segmentation: segmentation,\n            heatmapScores: heatmapScores,\n            offsets: offsets,\n            displacementFwd: displacementFwd,\n            displacementBwd: displacementBwd,\n            padding: padding,\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\n        };\n    };\n    /**\n     * Given an image with many people, returns a PersonSegmentation dictionary\n     * that contains the segmentation mask for all people and a single pose.\n     *\n     * Note: The segmentation mask returned by this method covers all people but\n     * the pose works well for one person. If you want to estimate instance-level\n     * multiple person segmentation & pose for each person, use\n     * `segmentMultiPerson` instead.\n     *\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n     * The input image to feed through the network.\n     *\n     * @param config PersonInferenceConfig object that contains\n     * parameters for the BodyPix inference using person decoding.\n     *\n     * @return A SemanticPersonSegmentation dictionary that contains height,\n     * width, the flattened binary segmentation mask and the poses for all people.\n     * The width and height correspond to the same dimensions of the input image.\n     * - `height`: The height of the segmentation data in pixel unit.\n     * - `width`: The width of the segmentation data in pixel unit.\n     * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\n     * belongs to a person and 0 means the pixel doesn't belong to a person. The\n     * size of the array is equal to `height` x `width` in row-major order.\n     * - `allPoses`: The 2d poses of all people.\n     */\n    BodyPix.prototype.segmentPerson = function (input, config) {\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, segmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, result, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        config = __assign({}, exports.PERSON_INFERENCE_CONFIG, config);\n                        validatePersonInferenceConfig(config);\n                        _a = this.segmentPersonActivation(input, config.internalResolution, config.segmentationThreshold), segmentation = _a.segmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\n                        _b = segmentation.shape, height = _b[0], width = _b[1];\n                        return [4 /*yield*/, segmentation.data()];\n                    case 1:\n                        result = _c.sent();\n                        segmentation.dispose();\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\n                    case 2:\n                        tensorBuffers = _c.sent();\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n                        heatmapScores.dispose();\n                        offsets.dispose();\n                        displacementFwd.dispose();\n                        displacementBwd.dispose();\n                        return [2 /*return*/, { height: height, width: width, data: result, allPoses: poses }];\n                }\n            });\n        });\n    };\n    /**\n     * Given an image with multiple people, returns an *array* of\n     * PersonSegmentation object. Each element in the array corresponding to one\n     * of the people in the input image. In other words, it predicts\n     * instance-level multiple person segmentation & pose for each person.\n     *\n     * The model does standard ImageNet pre-processing before inferring through\n     * the model. The image pixels should have values [0-255].\n     *\n     * @param input\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n     * image to feed through the network.\n     *\n     * @param config MultiPersonInferenceConfig object that contains\n     * parameters for the BodyPix inference using multi-person decoding.\n     *\n     * @return An array of PersonSegmentation object, each containing a width,\n     * height, a binary array (1 for the pixels that are part of the\n     * person, and 0 otherwise) and 2D pose. The array size corresponds to the\n     * number of pixels in the image. The width and height correspond to the\n     * dimensions of the image the binary array is shaped to, which are the same\n     * dimensions of the input image.\n     */\n    BodyPix.prototype.segmentMultiPerson = function (input, config) {\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        config = __assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, config);\n                        validateMultiPersonInstanceInferenceConfig(config);\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n                        _c = tf.tidy(function () {\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n                            var longOffsetsResized = false;\n                            var scaledLongOffsets;\n                            if (longOffsetsResized) {\n                                scaledLongOffsets = util_1.scaleAndCropToInputTensorShape(longOffsets, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n                            }\n                            else {\n                                scaledLongOffsets = longOffsets;\n                            }\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n                            return {\n                                segmentation: segmentation,\n                                longOffsets: scaledLongOffsets,\n                                heatmapScoresRaw: heatmapScores,\n                                offsetsRaw: offsets,\n                                displacementFwdRaw: displacementFwd,\n                                displacementBwdRaw: displacementBwd,\n                            };\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw;\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\n                    case 1:\n                        tensorBuffers = _d.sent();\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstanceMasks(segmentation, longOffsets, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\n                    case 2:\n                        instanceMasks = _d.sent();\n                        resized.dispose();\n                        segmentation.dispose();\n                        longOffsets.dispose();\n                        heatmapScoresRaw.dispose();\n                        offsetsRaw.dispose();\n                        displacementFwdRaw.dispose();\n                        displacementBwdRaw.dispose();\n                        return [2 /*return*/, instanceMasks];\n                }\n            });\n        });\n    };\n    /**\n     * Given an image with many people, returns a dictionary containing: height,\n     * width, a tensor with a part id from 0-24 for the pixels that are\n     * part of a corresponding body part, and -1 otherwise. This does standard\n     * ImageNet pre-processing before inferring through the model.  The image\n     * should pixels should have values [0-255].\n     *\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n     * The input image to feed through the network.\n     *\n     * @param internalResolution Defaults to 'medium'. The internal resolution\n     * percentage that the input is resized to before inference. The larger the\n     * internalResolution the more accurate the model at the cost of slower\n     * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n     * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n     * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n     *\n     * @param segmentationThreshold The minimum that segmentation values must have\n     * to be considered part of the person.  Affects the clipping of the colored\n     * part image.\n     *\n     * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\n     * `offsets`, and `padding`:\n     * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\n     * the pixels that are part of a corresponding body part, and -1 otherwise.\n     * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n     * single-person pose estimation decoding.\n     * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\n     * estimation decoding.\n     * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\n     * used by pose estimation decoding.\n     * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n     * by pose estimation decoding.\n     * - `padding`: The padding (unit pixels) being applied to the input image\n     * before it is fed into the model.\n     */\n    BodyPix.prototype.segmentPersonPartsActivation = function (input, internalResolution, segmentationThreshold) {\n        var _this = this;\n        if (segmentationThreshold === void 0) { segmentationThreshold = 0.5; }\n        var _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\n        var internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(internalResolution, this.baseModel.outputStride, [height, width]);\n        var _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n        var _c = tf.tidy(function () {\n            var _a = _this.predictForPersonSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, partHeatmapLogits = _a.partHeatmapLogits, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;\n            var _b = resized.shape, resizedHeight = _b[0], resizedWidth = _b[1];\n            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n            var scaledPartHeatmapScore = util_1.scaleAndCropToInputTensorShape(partHeatmapLogits, [height, width], [resizedHeight, resizedWidth], [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold);\n            return {\n                partSegmentation: decode_part_map_1.decodePartSegmentation(segmentation, scaledPartHeatmapScore),\n                heatmapScores: heatmapScores,\n                offsets: offsets,\n                displacementFwd: displacementFwd,\n                displacementBwd: displacementBwd,\n            };\n        }), partSegmentation = _c.partSegmentation, heatmapScores = _c.heatmapScores, offsets = _c.offsets, displacementFwd = _c.displacementFwd, displacementBwd = _c.displacementBwd;\n        resized.dispose();\n        return {\n            partSegmentation: partSegmentation,\n            heatmapScores: heatmapScores,\n            offsets: offsets,\n            displacementFwd: displacementFwd,\n            displacementBwd: displacementBwd,\n            padding: padding,\n            internalResolutionHeightAndWidth: internalResolutionHeightAndWidth\n        };\n    };\n    /**\n     * Given an image with many people, returns a PartSegmentation dictionary that\n     * contains the body part segmentation mask for all people and a single pose.\n     *\n     * Note: The body part segmentation mask returned by this method covers all\n     * people but the pose works well when there is one person. If you want to\n     * estimate instance-level multiple person body part segmentation & pose for\n     * each person, use `segmentMultiPersonParts` instead.\n     *\n     * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n     * The input image to feed through the network.\n     *\n     * @param config PersonInferenceConfig object that contains\n     * parameters for the BodyPix inference using single person decoding.\n     *\n     * @return A SemanticPartSegmentation dictionary that contains height, width,\n     * the flattened binary segmentation mask and the pose for the person. The\n     * width and height correspond to the same dimensions of the input image.\n     * - `height`: The height of the person part segmentation data in pixel unit.\n     * - `width`: The width of the person part segmentation data in pixel unit.\n     * - `data`: The flattened Int32Array of person part segmentation data with a\n     * part id from 0-24 for the pixels that are part of a corresponding body\n     * part, and -1 otherwise. The size of the array is equal to `height` x\n     * `width` in row-major order.\n     * - `allPoses`: The 2d poses of all people.\n     */\n    BodyPix.prototype.segmentPersonParts = function (input, config) {\n        if (config === void 0) { config = exports.PERSON_INFERENCE_CONFIG; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, partSegmentation, heatmapScores, offsets, displacementFwd, displacementBwd, padding, internalResolutionHeightAndWidth, _b, height, width, data, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        config = __assign({}, exports.PERSON_INFERENCE_CONFIG, config);\n                        validatePersonInferenceConfig(config);\n                        _a = this.segmentPersonPartsActivation(input, config.internalResolution, config.segmentationThreshold), partSegmentation = _a.partSegmentation, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, padding = _a.padding, internalResolutionHeightAndWidth = _a.internalResolutionHeightAndWidth;\n                        _b = partSegmentation.shape, height = _b[0], width = _b[1];\n                        return [4 /*yield*/, partSegmentation.data()];\n                    case 1:\n                        data = _c.sent();\n                        partSegmentation.dispose();\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];\n                    case 2:\n                        tensorBuffers = _c.sent();\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n                        heatmapScores.dispose();\n                        offsets.dispose();\n                        displacementFwd.dispose();\n                        displacementBwd.dispose();\n                        return [2 /*return*/, { height: height, width: width, data: data, allPoses: poses }];\n                }\n            });\n        });\n    };\n    /**\n     * Given an image with multiple people, returns an *array* of PartSegmentation\n     * object. Each element in the array corresponding to one\n     * of the people in the input image. In other words, it predicts\n     * instance-level multiple person body part segmentation & pose for each\n     * person.\n     *\n     * This does standard ImageNet pre-processing before inferring through\n     * the model. The image pixels should have values [0-255].\n     *\n     * @param input\n     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n     * image to feed through the network.\n     *\n     * @param config MultiPersonInferenceConfig object that contains\n     * parameters for the BodyPix inference using multi-person decoding.\n     *\n     * @return An array of PartSegmentation object, each containing a width,\n     * height, a flattened array (with part id from 0-24 for the pixels that are\n     * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\n     * and height correspond to the dimensions of the image. Each flattened part\n     * segmentation array size is equal to `height` x `width`.\n     */\n    BodyPix.prototype.segmentMultiPersonParts = function (input, config) {\n        if (config === void 0) { config = exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, height, width, internalResolutionHeightAndWidth, _b, resized, padding, _c, segmentation, longOffsets, heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw, partSegmentation, tensorBuffers, scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, poses, instanceMasks;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        config = __assign({}, exports.MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, config);\n                        validateMultiPersonInstanceInferenceConfig(config);\n                        _a = util_1.getInputSize(input), height = _a[0], width = _a[1];\n                        internalResolutionHeightAndWidth = util_1.toInputResolutionHeightAndWidth(config.internalResolution, this.baseModel.outputStride, [height, width]);\n                        _b = util_1.padAndResizeTo(input, internalResolutionHeightAndWidth), resized = _b.resized, padding = _b.padding;\n                        _c = tf.tidy(function () {\n                            var _a = _this.predictForMultiPersonInstanceSegmentationAndPart(resized), segmentLogits = _a.segmentLogits, longOffsets = _a.longOffsets, heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd, partHeatmaps = _a.partHeatmaps;\n                            // decoding with scaling.\n                            var scaledSegmentScores = util_1.scaleAndCropToInputTensorShape(segmentLogits, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n                            // decoding with scaling.\n                            var scaledPartSegmentationScores = util_1.scaleAndCropToInputTensorShape(partHeatmaps, [height, width], internalResolutionHeightAndWidth, [[padding.top, padding.bottom], [padding.left, padding.right]], APPLY_SIGMOID_ACTIVATION);\n                            var scaledLongOffsets = longOffsets;\n                            var segmentation = decode_part_map_1.toMaskTensor(tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n                            var partSegmentation = decode_part_map_1.decodeOnlyPartSegmentation(scaledPartSegmentationScores);\n                            return {\n                                segmentation: segmentation,\n                                longOffsets: scaledLongOffsets,\n                                heatmapScoresRaw: heatmapScores,\n                                offsetsRaw: offsets,\n                                displacementFwdRaw: displacementFwd,\n                                displacementBwdRaw: displacementBwd,\n                                partSegmentation: partSegmentation\n                            };\n                        }), segmentation = _c.segmentation, longOffsets = _c.longOffsets, heatmapScoresRaw = _c.heatmapScoresRaw, offsetsRaw = _c.offsetsRaw, displacementFwdRaw = _c.displacementFwdRaw, displacementBwdRaw = _c.displacementBwdRaw, partSegmentation = _c.partSegmentation;\n                        return [4 /*yield*/, util_1.toTensorBuffers3D([heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw])];\n                    case 1:\n                        tensorBuffers = _d.sent();\n                        scoresBuf = tensorBuffers[0], offsetsBuf = tensorBuffers[1], displacementsFwdBuf = tensorBuffers[2], displacementsBwdBuf = tensorBuffers[3];\n                        poses = decode_multiple_poses_1.decodeMultiplePoses(scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf, this.baseModel.outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius);\n                        poses = util_1.scaleAndFlipPoses(poses, [height, width], internalResolutionHeightAndWidth, padding, FLIP_POSES_AFTER_SCALING);\n                        return [4 /*yield*/, decode_instance_masks_1.decodePersonInstancePartMasks(segmentation, longOffsets, partSegmentation, poses, height, width, this.baseModel.outputStride, internalResolutionHeightAndWidth, padding, config.scoreThreshold, config.refineSteps, config.minKeypointScore, config.maxDetections)];\n                    case 2:\n                        instanceMasks = _d.sent();\n                        resized.dispose();\n                        segmentation.dispose();\n                        longOffsets.dispose();\n                        heatmapScoresRaw.dispose();\n                        offsetsRaw.dispose();\n                        displacementFwdRaw.dispose();\n                        displacementBwdRaw.dispose();\n                        partSegmentation.dispose();\n                        return [2 /*return*/, instanceMasks];\n                }\n            });\n        });\n    };\n    BodyPix.prototype.dispose = function () {\n        this.baseModel.dispose();\n    };\n    return BodyPix;\n}());\nexports.BodyPix = BodyPix;\n/**\n * Loads the MobileNet BodyPix model.\n */\nfunction loadMobileNet(config) {\n    return __awaiter(this, void 0, void 0, function () {\n        var outputStride, quantBytes, multiplier, url, graphModel, mobilenet;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    outputStride = config.outputStride;\n                    quantBytes = config.quantBytes;\n                    multiplier = config.multiplier;\n                    if (tf == null) {\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\n                    }\n                    url = saved_models_1.mobileNetSavedModel(outputStride, multiplier, quantBytes);\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\n                case 1:\n                    graphModel = _a.sent();\n                    mobilenet = new mobilenet_1.MobileNet(graphModel, outputStride);\n                    return [2 /*return*/, new BodyPix(mobilenet)];\n            }\n        });\n    });\n}\n/**\n * Loads the ResNet BodyPix model.\n */\nfunction loadResNet(config) {\n    return __awaiter(this, void 0, void 0, function () {\n        var outputStride, quantBytes, url, graphModel, resnet;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    outputStride = config.outputStride;\n                    quantBytes = config.quantBytes;\n                    if (tf == null) {\n                        throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please \" +\n                            \"also include @tensorflow/tfjs on the page before using this\\n        model.\");\n                    }\n                    url = saved_models_1.resNet50SavedModel(outputStride, quantBytes);\n                    return [4 /*yield*/, tfconv.loadGraphModel(config.modelUrl || url)];\n                case 1:\n                    graphModel = _a.sent();\n                    resnet = new resnet_1.ResNet(graphModel, outputStride);\n                    return [2 /*return*/, new BodyPix(resnet)];\n            }\n        });\n    });\n}\n/**\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the BodyPix loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nfunction load(config) {\n    if (config === void 0) { config = MOBILENET_V1_CONFIG; }\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            config = validateModelConfig(config);\n            if (config.architecture === 'ResNet50') {\n                return [2 /*return*/, loadResNet(config)];\n            }\n            else if (config.architecture === 'MobileNetV1') {\n                return [2 /*return*/, loadMobileNet(config)];\n            }\n            else {\n                return [2 /*return*/, null];\n            }\n            return [2 /*return*/];\n        });\n    });\n}\nexports.load = load;\n"},"sourceMaps":{"js":{"version":3,"file":"body_pix_model.js","sourceRoot":"","sources":["../src/body_pix_model.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"da42b9057d21a8aa5d6db68e98b6def3","cacheData":{"env":{}}}