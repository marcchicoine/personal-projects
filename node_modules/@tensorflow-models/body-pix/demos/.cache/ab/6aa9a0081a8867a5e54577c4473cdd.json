{"id":"node_modules/@tensorflow-models/body-pix/decode_part_map.js","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/decode_part_map.js.map","includedInParent":true,"mtime":1613671120464},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"@tensorflow/tfjs-core","loc":{"line":19,"column":17},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/decode_part_map.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-core/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs-core\");\n/**\n * Takes the sigmoid of the part heatmap output and generates a 2d one-hot\n * tensor with ones where the part's score has the maximum value.\n *\n * @param partHeatmapScores\n */\nfunction toFlattenedOneHotPartMap(partHeatmapScores) {\n    var numParts = partHeatmapScores.shape[2];\n    var partMapLocations = tf.argMax(partHeatmapScores, 2);\n    var partMapFlattened = tf.reshape(partMapLocations, [-1]);\n    return tf.oneHot(partMapFlattened, numParts);\n}\nfunction clipByMask2d(image, mask) {\n    return tf.mul(image, mask);\n}\n/**\n * Takes the sigmoid of the segmentation output, and generates a segmentation\n * mask with a 1 or 0 at each pixel where there is a person or not a person. The\n * segmentation threshold determines the threshold of a score for a pixel for it\n * to be considered part of a person.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param segmentationThreshold The minimum that segmentation values must have\n * to be considered part of the person.  Affects the generation of the\n * segmentation mask and the clipping of the colored part image.\n *\n * @returns A segmentation mask with a 1 or 0 at each pixel where there is a\n * person or not a person.\n */\nfunction toMaskTensor(segmentScores, threshold) {\n    return tf.tidy(function () {\n        return tf.cast(tf.greater(segmentScores, tf.scalar(threshold)), 'int32');\n    });\n}\nexports.toMaskTensor = toMaskTensor;\n/**\n * Takes the sigmoid of the person and part map output, and returns a 2d tensor\n * of an image with the corresponding value at each pixel corresponding to the\n * part with the highest value. These part ids are clipped by the segmentation\n * mask. Wherever the a pixel is clipped by the segmentation mask, its value\n * will set to -1, indicating that there is no part in that pixel.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param partHeatmapScores A 3d-tensor of the sigmoid of the part heatmap\n * output. The third dimension corresponds to the part.\n *\n * @returns A 2d tensor of an image with the corresponding value at each pixel\n * corresponding to the part with the highest value. These part ids are clipped\n * by the segmentation mask.  It will have values of -1 for pixels that are\n * outside of the body and do not have a corresponding part.\n */\nfunction decodePartSegmentation(segmentationMask, partHeatmapScores) {\n    var _a = partHeatmapScores.shape, partMapHeight = _a[0], partMapWidth = _a[1], numParts = _a[2];\n    return tf.tidy(function () {\n        var flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n        var partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n        var partMapFlattened = tf.cast(tf.matMul(flattenedMap, partNumbers), 'int32');\n        var partMap = tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n        var partMapShiftedUpForClipping = tf.add(partMap, tf.scalar(1, 'int32'));\n        return tf.sub(clipByMask2d(partMapShiftedUpForClipping, segmentationMask), tf.scalar(1, 'int32'));\n    });\n}\nexports.decodePartSegmentation = decodePartSegmentation;\nfunction decodeOnlyPartSegmentation(partHeatmapScores) {\n    var _a = partHeatmapScores.shape, partMapHeight = _a[0], partMapWidth = _a[1], numParts = _a[2];\n    return tf.tidy(function () {\n        var flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n        var partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n        var partMapFlattened = tf.cast(tf.matMul(flattenedMap, partNumbers), 'int32');\n        return tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n    });\n}\nexports.decodeOnlyPartSegmentation = decodeOnlyPartSegmentation;\n"},"sourceMaps":{"js":{"version":3,"file":"decode_part_map.js","sourceRoot":"","sources":["../src/decode_part_map.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,0CAA4C;AAE5C;;;;;GAKG;AACH,SAAS,wBAAwB,CAAC,iBAA8B;IAC9D,IAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAM,gBAAgB,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAEzD,IAAM,gBAAgB,GAAG,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5D,OAAO,EAAE,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAgB,CAAC;AAC9D,CAAC;AAED,SAAS,YAAY,CAAC,KAAkB,EAAE,IAAiB;IACzD,OAAO,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,SAAgB,YAAY,CACxB,aAA0B,EAAE,SAAiB;IAC/C,OAAO,EAAE,CAAC,IAAI,CACV;QACI,OAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CACf,aAAa,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAiB;IADlE,CACkE,CAAC,CAAC;AAC9E,CAAC;AAND,oCAMC;AAED;;;;;;;;;;;;;;GAcG;AACH,SAAgB,sBAAsB,CAClC,gBAA6B,EAC7B,iBAA8B;IAC1B,IAAA,4BAAiE,EAAhE,qBAAa,EAAE,oBAAY,EAAE,gBAAmC,CAAC;IACxE,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,YAAY,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QACjE,IAAM,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAExE,IAAM,gBAAgB,GAClB,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,WAA0B,CAAC,EAAE,OAAO,CAAC,CAAC;QAE1E,IAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC;QAE5E,IAAM,2BAA2B,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAE3E,OAAO,EAAE,CAAC,GAAG,CAAC,YAAY,CACf,2BAA0C,EAAE,gBAAgB,CAAC,EAClE,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAnBD,wDAmBC;AAED,SAAgB,0BAA0B,CAAC,iBAA8B;IAEjE,IAAA,4BAAiE,EAAhE,qBAAa,EAAE,oBAAY,EAAE,gBAAmC,CAAC;IACxE,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,YAAY,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QACjE,IAAM,WAAW,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAExE,IAAM,gBAAgB,GAClB,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,WAA0B,CAAC,EAAE,OAAO,CAAC,CAAC;QAE1E,OAAO,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACL,CAAC;AAZD,gEAYC","sourcesContent":[null]}},"error":null,"hash":"154256a10d73b3d6baaa449a4874624b","cacheData":{"env":{}}}