{"id":"LHRJ","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js.map","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/src/conv_gpu.ts","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1613524214681}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Conv3DProgram=exports.Conv2DProgram=void 0;class n{constructor(n,t=!1,e=null,o=!1,a=!1){this.variableNames=[\"x\",\"W\"],this.outputShape=n.outShape;const d=n.padInfo.top,i=n.padInfo.left,s=n.strideHeight,x=n.strideWidth,r=n.dilationHeight,c=n.dilationWidth,C=n.filterHeight,l=n.filterWidth,w=4*Math.floor(n.inChannels/4),h=n.inChannels%4,u=\"channelsLast\"===n.dataFormat,R=u?1:2,$=u?2:3,g=u?3:1;let v=\"\",f=\"\";e&&(v=o?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${e}\\n        }`:a?`float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          ${e}\\n        }`:`\\n          float activation(float x) {\\n            ${e}\\n          }\\n        `,f=\"result = activation(result);\");const b=t?\"result += getBiasAtOutCoords();\":\"\";t&&this.variableNames.push(\"bias\"),o&&this.variableNames.push(\"preluActivationWeights\"),a&&this.variableNames.push(\"leakyreluAlpha\"),this.userCode=`\\n      ${v}\\n\\n      const ivec2 strides = ivec2(${s}, ${x});\\n      const ivec2 pads = ivec2(${d}, ${i});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[${g}];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[${R}], coords[${$}]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${C}; wR++) {\\n          int xR = xRCorner + wR * ${r};\\n\\n          if (xR < 0 || xR >= ${n.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${l}; wC++) {\\n            int xC = xCCorner + wC * ${c};\\n\\n            if (xC < 0 || xC >= ${n.inWidth}) {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < ${w}; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (${u}) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (${1===h}) {\\n\\n              if (${u}) {\\n                dotProd +=\\n                    getX(batch, xR, xC, ${w}) *\\n                    getW(wR, wC, ${w}, d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, ${w}, xR, xC) *\\n                    getW(wR, wC, ${w}, d2);\\n              }\\n\\n            } else if (${2===h}) {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, ${w}, d2),\\n                getW(wR, wC, ${w} + 1, d2)\\n              );\\n\\n              if (${u}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, ${w}),\\n                  getX(batch, xR, xC, ${w} + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, ${w}, xR, xC),\\n                  getX(batch, ${w} + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (${3===h}) {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, ${w}, d2),\\n                getW(wR, wC, ${w} + 1, d2),\\n                getW(wR, wC, ${w} + 2, d2)\\n              );\\n\\n              if (${u}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, ${w}),\\n                  getX(batch, xR, xC, ${w} + 1),\\n                  getX(batch, xR, xC, ${w} + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, ${w}, xR, xC),\\n                  getX(batch, ${w} + 1, xR, xC),\\n                  getX(batch, ${w} + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${b}\\n        ${f}\\n        setOutput(result);\\n      }\\n    `}}exports.Conv2DProgram=n;class t{constructor(n){this.variableNames=[\"x\",\"W\"],this.outputShape=n.outShape;const t=n.padInfo.front,e=n.padInfo.top,o=n.padInfo.left,a=n.strideDepth,d=n.strideHeight,i=n.strideWidth,s=n.dilationDepth,x=n.dilationHeight,r=n.dilationWidth,c=n.filterDepth,C=n.filterHeight,l=n.filterWidth,w=4*Math.floor(n.inChannels/4),h=n.inChannels%4;this.userCode=`\\n      const ivec3 strides = ivec3(${a}, ${d}, ${i});\\n      const ivec3 pads = ivec3(${t}, ${e}, ${o});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < ${c}; wF++) {\\n          int xF = xFCorner + wF * ${s};\\n\\n          if (xF < 0 || xF >= ${n.inDepth}) {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < ${C}; wR++) {\\n            int xR = xRCorner + wR * ${x};\\n\\n            if (xR < 0 || xR >= ${n.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${l}; wC++) {\\n              int xC = xCCorner + wC * ${r};\\n\\n              if (xC < 0 || xC >= ${n.inWidth}) {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < ${w}; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (${1===h}) {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, ${w}) *\\n                  getW(wF, wR, wC, ${w}, d2);\\n              } else if (${2===h}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, ${w}),\\n                  getX(batch, xF, xR, xC, ${w} + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, ${w}, d2),\\n                  getW(wF, wR, wC, ${w} + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (${3===h}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, ${w}),\\n                  getX(batch, xF, xR, xC, ${w} + 1),\\n                  getX(batch, xF, xR, xC, ${w} + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, ${w}, d2),\\n                  getW(wF, wR, wC, ${w} + 1, d2),\\n                  getW(wF, wR, wC, ${w} + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}exports.Conv3DProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":0}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":13}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":20}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":35}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":43}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":56}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":57}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":64}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":68}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":76}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":90}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":98}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":117}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":119}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":125}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":127}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":139}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":41},"generated":{"line":1,"column":141}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":51},"generated":{"line":1,"column":144}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":146}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":27},"generated":{"line":1,"column":148}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":33},"generated":{"line":1,"column":153}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":61},"generated":{"line":1,"column":156}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":158}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":1,"column":161}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":164}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":169}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":183}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":184}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":24},"generated":{"line":1,"column":188}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":193}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":198}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":1,"column":210}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":32},"generated":{"line":1,"column":212}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":221}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":227}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":19},"generated":{"line":1,"column":229}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":28},"generated":{"line":1,"column":231}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":36},"generated":{"line":1,"column":239}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":10},"generated":{"line":1,"column":243}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":1,"column":245}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":29},"generated":{"line":1,"column":247}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":37},"generated":{"line":1,"column":255}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":260}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":1,"column":262}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":34},"generated":{"line":1,"column":264}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":10},"generated":{"line":1,"column":277}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":24},"generated":{"line":1,"column":279}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":33},"generated":{"line":1,"column":281}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":1,"column":293}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":27},"generated":{"line":1,"column":295}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":36},"generated":{"line":1,"column":297}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":312}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":26},"generated":{"line":1,"column":314}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":35},"generated":{"line":1,"column":316}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":10},"generated":{"line":1,"column":330}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":25},"generated":{"line":1,"column":332}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":34},"generated":{"line":1,"column":334}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":38,"column":10},"generated":{"line":1,"column":347}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":38,"column":24},"generated":{"line":1,"column":349}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":38,"column":33},"generated":{"line":1,"column":351}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":1,"column":363}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":72},"generated":{"line":1,"column":365}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":1,"column":367}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":1,"column":372}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":45},"generated":{"line":1,"column":378}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":54},"generated":{"line":1,"column":380}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":67},"generated":{"line":1,"column":391}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":10},"generated":{"line":1,"column":394}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":36},"generated":{"line":1,"column":396}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":45},"generated":{"line":1,"column":398}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":58},"generated":{"line":1,"column":409}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":1,"column":411}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":1,"column":413}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":42,"column":27},"generated":{"line":1,"column":430}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":42,"column":36},"generated":{"line":1,"column":432}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":10},"generated":{"line":1,"column":443}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":19},"generated":{"line":1,"column":445}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":36},"generated":{"line":1,"column":447}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":40},"generated":{"line":1,"column":449}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":1,"column":451}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":19},"generated":{"line":1,"column":453}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":36},"generated":{"line":1,"column":455}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":40},"generated":{"line":1,"column":457}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":46,"column":10},"generated":{"line":1,"column":459}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":46,"column":23},"generated":{"line":1,"column":461}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":46,"column":40},"generated":{"line":1,"column":463}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":46,"column":44},"generated":{"line":1,"column":465}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":1,"column":467}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":1,"column":471}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":28},"generated":{"line":1,"column":473}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":32},"generated":{"line":1,"column":476}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":57},"generated":{"line":1,"column":478}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":49,"column":8},"generated":{"line":1,"column":481}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":51,"column":8},"generated":{"line":1,"column":485}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":1,"column":487}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":53,"column":12},"generated":{"line":1,"column":592}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":55,"column":17},"generated":{"line":1,"column":607}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":58,"column":12},"generated":{"line":1,"column":704}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":63,"column":14},"generated":{"line":1,"column":775}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":68,"column":6},"generated":{"line":1,"column":802}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":68,"column":31},"generated":{"line":1,"column":804}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":10},"generated":{"line":1,"column":836}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":10},"generated":{"line":1,"column":842}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":27},"generated":{"line":1,"column":844}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":37},"generated":{"line":1,"column":846}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":73},"generated":{"line":1,"column":880}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":72,"column":8},"generated":{"line":1,"column":883}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":73,"column":11},"generated":{"line":1,"column":886}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":73,"column":11},"generated":{"line":1,"column":891}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":73,"column":25},"generated":{"line":1,"column":905}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":73,"column":30},"generated":{"line":1,"column":910}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":76,"column":8},"generated":{"line":1,"column":918}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":11},"generated":{"line":1,"column":921}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":11},"generated":{"line":1,"column":926}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":25},"generated":{"line":1,"column":940}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":30},"generated":{"line":1,"column":945}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":80,"column":8},"generated":{"line":1,"column":971}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":81,"column":11},"generated":{"line":1,"column":974}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":81,"column":11},"generated":{"line":1,"column":979}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":1,"column":993}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":81,"column":30},"generated":{"line":1,"column":998}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":1,"column":1016}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":1,"column":1021}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":85,"column":8},"generated":{"line":1,"column":1041}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":87,"column":36},"generated":{"line":1,"column":1083}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":87,"column":53},"generated":{"line":1,"column":1089}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":88,"column":33},"generated":{"line":1,"column":1128}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":88,"column":44},"generated":{"line":1,"column":1134}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":93,"column":26},"generated":{"line":1,"column":1264}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":96,"column":27},"generated":{"line":1,"column":1326}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":96,"column":46},"generated":{"line":1,"column":1340}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":103,"column":32},"generated":{"line":1,"column":1648}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":104,"column":37},"generated":{"line":1,"column":1698}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":106,"column":32},"generated":{"line":1,"column":1737}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":106,"column":41},"generated":{"line":1,"column":1739}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":110,"column":34},"generated":{"line":1,"column":1825}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":111,"column":39},"generated":{"line":1,"column":1877}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":113,"column":34},"generated":{"line":1,"column":1918}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":113,"column":43},"generated":{"line":1,"column":1920}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":117,"column":36},"generated":{"line":1,"column":2011}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":125,"column":20},"generated":{"line":1,"column":2270}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":144,"column":46},"generated":{"line":1,"column":2945}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":144,"column":18},"generated":{"line":1,"column":2949}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":146,"column":20},"generated":{"line":1,"column":2978}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":148,"column":42},"generated":{"line":1,"column":3055}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":149,"column":35},"generated":{"line":1,"column":3097}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":152,"column":34},"generated":{"line":1,"column":3193}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":153,"column":35},"generated":{"line":1,"column":3243}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":156,"column":53},"generated":{"line":1,"column":3297}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":156,"column":25},"generated":{"line":1,"column":3301}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":158,"column":31},"generated":{"line":1,"column":3375}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":159,"column":31},"generated":{"line":1,"column":3416}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":162,"column":20},"generated":{"line":1,"column":3469}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":164,"column":40},"generated":{"line":1,"column":3554}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":165,"column":40},"generated":{"line":1,"column":3600}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":170,"column":32},"generated":{"line":1,"column":3774}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":171,"column":32},"generated":{"line":1,"column":3820}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":176,"column":53},"generated":{"line":1,"column":3952}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":176,"column":25},"generated":{"line":1,"column":3956}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":178,"column":31},"generated":{"line":1,"column":4030}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":179,"column":31},"generated":{"line":1,"column":4071}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":180,"column":31},"generated":{"line":1,"column":4116}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":183,"column":20},"generated":{"line":1,"column":4169}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":185,"column":40},"generated":{"line":1,"column":4254}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":186,"column":40},"generated":{"line":1,"column":4300}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":187,"column":40},"generated":{"line":1,"column":4350}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":192,"column":32},"generated":{"line":1,"column":4524}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":193,"column":32},"generated":{"line":1,"column":4570}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":194,"column":32},"generated":{"line":1,"column":4620}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":204,"column":10},"generated":{"line":1,"column":4811}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":205,"column":10},"generated":{"line":1,"column":4825}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":4873}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":4881}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":4895}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":6},"generated":{"line":1,"column":4897}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":13},"generated":{"line":1,"column":4903}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":217,"column":2},"generated":{"line":1,"column":4905}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":217,"column":14},"generated":{"line":1,"column":4917}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":2},"generated":{"line":1,"column":4920}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":2},"generated":{"line":1,"column":4925}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":18},"generated":{"line":1,"column":4939}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":19},"generated":{"line":1,"column":4940}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":24},"generated":{"line":1,"column":4944}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":9},"generated":{"line":1,"column":4949}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":9},"generated":{"line":1,"column":4954}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":23},"generated":{"line":1,"column":4966}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":32},"generated":{"line":1,"column":4968}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":10},"generated":{"line":1,"column":4977}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":10},"generated":{"line":1,"column":4983}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":21},"generated":{"line":1,"column":4985}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":30},"generated":{"line":1,"column":4987}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":38},"generated":{"line":1,"column":4995}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":10},"generated":{"line":1,"column":5001}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":19},"generated":{"line":1,"column":5003}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":28},"generated":{"line":1,"column":5005}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":36},"generated":{"line":1,"column":5013}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":221,"column":10},"generated":{"line":1,"column":5017}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":221,"column":20},"generated":{"line":1,"column":5019}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":221,"column":29},"generated":{"line":1,"column":5021}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":221,"column":37},"generated":{"line":1,"column":5029}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":10},"generated":{"line":1,"column":5034}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":24},"generated":{"line":1,"column":5036}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":33},"generated":{"line":1,"column":5038}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":10},"generated":{"line":1,"column":5050}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":25},"generated":{"line":1,"column":5052}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":34},"generated":{"line":1,"column":5054}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":224,"column":10},"generated":{"line":1,"column":5067}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":224,"column":24},"generated":{"line":1,"column":5069}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":224,"column":33},"generated":{"line":1,"column":5071}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":225,"column":10},"generated":{"line":1,"column":5083}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":225,"column":26},"generated":{"line":1,"column":5085}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":225,"column":35},"generated":{"line":1,"column":5087}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":226,"column":10},"generated":{"line":1,"column":5101}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":226,"column":27},"generated":{"line":1,"column":5103}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":226,"column":36},"generated":{"line":1,"column":5105}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":227,"column":10},"generated":{"line":1,"column":5120}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":227,"column":26},"generated":{"line":1,"column":5122}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":227,"column":35},"generated":{"line":1,"column":5124}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":10},"generated":{"line":1,"column":5138}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":24},"generated":{"line":1,"column":5140}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":33},"generated":{"line":1,"column":5142}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":229,"column":10},"generated":{"line":1,"column":5154}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":229,"column":25},"generated":{"line":1,"column":5156}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":229,"column":34},"generated":{"line":1,"column":5158}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":230,"column":10},"generated":{"line":1,"column":5171}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":230,"column":24},"generated":{"line":1,"column":5173}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":230,"column":33},"generated":{"line":1,"column":5175}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":10},"generated":{"line":1,"column":5187}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":72},"generated":{"line":1,"column":5189}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":34},"generated":{"line":1,"column":5191}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":39},"generated":{"line":1,"column":5196}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":45},"generated":{"line":1,"column":5202}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":54},"generated":{"line":1,"column":5204}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":232,"column":67},"generated":{"line":1,"column":5215}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":233,"column":10},"generated":{"line":1,"column":5218}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":233,"column":36},"generated":{"line":1,"column":5220}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":233,"column":45},"generated":{"line":1,"column":5222}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":233,"column":58},"generated":{"line":1,"column":5233}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":1,"column":5235}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":1,"column":5240}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":236,"column":36},"generated":{"line":1,"column":5288}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":236,"column":52},"generated":{"line":1,"column":5294}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":237,"column":8},"generated":{"line":1,"column":5300}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":238,"column":33},"generated":{"line":1,"column":5339}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":238,"column":46},"generated":{"line":1,"column":5345}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":238,"column":57},"generated":{"line":1,"column":5351}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":254,"column":32},"generated":{"line":1,"column":5912}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":255,"column":37},"generated":{"line":1,"column":5962}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":257,"column":32},"generated":{"line":1,"column":6001}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":257,"column":41},"generated":{"line":1,"column":6003}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":261,"column":34},"generated":{"line":1,"column":6088}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":262,"column":39},"generated":{"line":1,"column":6140}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":264,"column":34},"generated":{"line":1,"column":6181}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":264,"column":43},"generated":{"line":1,"column":6183}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":268,"column":36},"generated":{"line":1,"column":6275}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":269,"column":41},"generated":{"line":1,"column":6329}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":271,"column":36},"generated":{"line":1,"column":6372}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":271,"column":45},"generated":{"line":1,"column":6374}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":275,"column":38},"generated":{"line":1,"column":6471}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":292,"column":48},"generated":{"line":1,"column":7089}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":292,"column":20},"generated":{"line":1,"column":7093}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":294,"column":44},"generated":{"line":1,"column":7172}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":295,"column":37},"generated":{"line":1,"column":7216}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":296,"column":55},"generated":{"line":1,"column":7253}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":296,"column":27},"generated":{"line":1,"column":7257}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":298,"column":44},"generated":{"line":1,"column":7346}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":299,"column":44},"generated":{"line":1,"column":7396}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":302,"column":37},"generated":{"line":1,"column":7500}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":303,"column":37},"generated":{"line":1,"column":7547}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":306,"column":55},"generated":{"line":1,"column":7658}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":306,"column":27},"generated":{"line":1,"column":7662}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":308,"column":44},"generated":{"line":1,"column":7751}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":309,"column":44},"generated":{"line":1,"column":7801}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":310,"column":44},"generated":{"line":1,"column":7855}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":313,"column":37},"generated":{"line":1,"column":7959}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":314,"column":37},"generated":{"line":1,"column":8006}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":315,"column":37},"generated":{"line":1,"column":8057}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":8242}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":8250}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":26},"generated":{"line":1,"column":8264}}],"sources":{"../src/conv_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"c478f261451a2895e368498f9f233b24","cacheData":{"env":{}}}