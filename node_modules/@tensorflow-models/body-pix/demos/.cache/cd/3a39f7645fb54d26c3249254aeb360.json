{"id":"BAHS","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js.map","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_bilinear_gpu.ts","includedInParent":true,"mtime":1613524214681},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1613524214681}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeBilinearProgram=void 0;class e{constructor(e,t,o,c,n){this.variableNames=[\"A\"],this.outputShape=[];const[r,i,s,u]=e;this.outputShape=[r,t,o,u];const a=[c&&t>1?i-1:i,c&&o>1?s-1:s],R=[c&&t>1?t-1:t,c&&o>1?o-1:o];let C;C=n?\"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)\":\"vec2(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          ${a[0]/R[0]},\\n          ${a[1]/R[1]});\\n      const vec2 inputShapeRC = vec2(${i}.0, ${s}.0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = ${C};\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    `}}exports.ResizeBilinearProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":0}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":13}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":20}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":35}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":43}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":56}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":57}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":64}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":68}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":76}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":103}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":105}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":111}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":113}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":125}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":1,"column":127}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":129}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":27,"column":24},"generated":{"line":1,"column":131}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":27,"column":47},"generated":{"line":1,"column":133}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":136}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":141}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":155}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":156}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":161}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":166}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":1,"column":178}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":181}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":1,"column":187}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":18},"generated":{"line":1,"column":189}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":29},"generated":{"line":1,"column":191}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":39},"generated":{"line":1,"column":193}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":48},"generated":{"line":1,"column":196}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":198}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":203}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":1,"column":215}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":216}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":31},"generated":{"line":1,"column":218}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":42},"generated":{"line":1,"column":220}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":52},"generated":{"line":1,"column":222}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":225}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":231}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":46},"generated":{"line":1,"column":233}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":7},"generated":{"line":1,"column":234}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":1,"column":237}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":35},"generated":{"line":1,"column":239}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":40},"generated":{"line":1,"column":241}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":52},"generated":{"line":1,"column":243}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":56},"generated":{"line":1,"column":245}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":7},"generated":{"line":1,"column":247}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":23},"generated":{"line":1,"column":250}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":34},"generated":{"line":1,"column":252}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":39},"generated":{"line":1,"column":254}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":256}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":54},"generated":{"line":1,"column":258}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":261}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":36,"column":47},"generated":{"line":1,"column":263}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":7},"generated":{"line":1,"column":264}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":23},"generated":{"line":1,"column":267}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":35},"generated":{"line":1,"column":269}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":40},"generated":{"line":1,"column":271}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":52},"generated":{"line":1,"column":273}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":56},"generated":{"line":1,"column":275}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":7},"generated":{"line":1,"column":277}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":23},"generated":{"line":1,"column":280}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":34},"generated":{"line":1,"column":282}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":39},"generated":{"line":1,"column":284}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":50},"generated":{"line":1,"column":286}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":54},"generated":{"line":1,"column":288}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":1,"column":291}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":1,"column":295}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":43,"column":6},"generated":{"line":1,"column":297}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":42,"column":8},"generated":{"line":1,"column":299}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":44,"column":10},"generated":{"line":1,"column":301}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":47,"column":26},"generated":{"line":1,"column":373}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":419}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":424}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":52,"column":12},"generated":{"line":1,"column":506}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":52,"column":28},"generated":{"line":1,"column":508}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":52,"column":33},"generated":{"line":1,"column":511}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":52,"column":50},"generated":{"line":1,"column":513}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":53,"column":12},"generated":{"line":1,"column":531}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":53,"column":28},"generated":{"line":1,"column":533}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":53,"column":33},"generated":{"line":1,"column":536}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":53,"column":50},"generated":{"line":1,"column":538}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":54,"column":39},"generated":{"line":1,"column":584}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":54,"column":55},"generated":{"line":1,"column":592}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":63,"column":35},"generated":{"line":1,"column":828}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1658}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1666}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1688}}],"sources":{"../src/resize_bilinear_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"a7fbc361f30eac3bdc1c969494df9845","cacheData":{"env":{}}}