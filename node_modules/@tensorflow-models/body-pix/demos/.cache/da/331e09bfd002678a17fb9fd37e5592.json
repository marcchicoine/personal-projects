{"id":"node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js","dependencies":[{"name":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js.map","includedInParent":true,"mtime":1613671120592},{"name":"/Users/linazhao/tf/models/body-pix/demos/package.json","includedInParent":true,"mtime":1613671076017},{"name":"/Users/linazhao/tf/models/body-pix/demos/.babelrc","includedInParent":true,"mtime":1608229350283},{"name":"./build_part_with_score_queue","loc":{"line":19,"column":44},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/build_part_with_score_queue.js"},{"name":"./decode_pose","loc":{"line":20,"column":28},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_pose.js"},{"name":"./util","loc":{"line":21,"column":21},"parent":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/decode_multiple_poses.js","resolved":"/Users/linazhao/tf/models/body-pix/demos/node_modules/@tensorflow-models/body-pix/multi_person/util.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar build_part_with_score_queue_1 = require(\"./build_part_with_score_queue\");\nvar decode_pose_1 = require(\"./decode_pose\");\nvar util_1 = require(\"./util\");\nfunction withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, _a, keypointId) {\n    var x = _a.x, y = _a.y;\n    return poses.some(function (_a) {\n        var keypoints = _a.keypoints;\n        var correspondingKeypoint = keypoints[keypointId].position;\n        return util_1.squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n            squaredNmsRadius;\n    });\n}\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(existingPoses, squaredNmsRadius, instanceKeypoints) {\n    var notOverlappedKeypointScores = instanceKeypoints.reduce(function (result, _a, keypointId) {\n        var position = _a.position, score = _a.score;\n        if (!withinNmsRadiusOfCorrespondingPoint(existingPoses, squaredNmsRadius, position, keypointId)) {\n            result += score;\n        }\n        return result;\n    }, 0.0);\n    return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nvar kLocalMaximumRadius = 1;\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nfunction decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, maxPoseDetections, scoreThreshold, nmsRadius) {\n    if (scoreThreshold === void 0) { scoreThreshold = 0.5; }\n    if (nmsRadius === void 0) { nmsRadius = 20; }\n    var poses = [];\n    var queue = build_part_with_score_queue_1.buildPartWithScoreQueue(scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n    var squaredNmsRadius = nmsRadius * nmsRadius;\n    // Generate at most maxDetections object instances per image in\n    // decreasing root part score order.\n    while (poses.length < maxPoseDetections && !queue.empty()) {\n        // The top element in the queue is the next root candidate.\n        var root = queue.dequeue();\n        // Part-based non-maximum suppression: We reject a root candidate if it\n        // is within a disk of `nmsRadius` pixels from the corresponding part of\n        // a previously detected instance.\n        var rootImageCoords = util_1.getImageCoords(root.part, outputStride, offsetsBuffer);\n        if (withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n            continue;\n        }\n        // Start a new detection instance at the position of the root.\n        var keypoints = decode_pose_1.decodePose(root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer, displacementsBwdBuffer);\n        var score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n        poses.push({ keypoints: keypoints, score: score });\n    }\n    return poses;\n}\nexports.decodeMultiplePoses = decodeMultiplePoses;\n"},"sourceMaps":{"js":{"version":3,"file":"decode_multiple_poses.js","sourceRoot":"","sources":["../../src/multi_person/decode_multiple_poses.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAIH,6EAAsE;AACtE,6CAAyC;AACzC,+BAAuD;AAEvD,SAAS,mCAAmC,CACxC,KAAa,EAAE,gBAAwB,EAAE,EAA8B,EACvE,UAAkB;QADwB,QAAC,EAAE,QAAC;IAEhD,OAAO,KAAK,CAAC,IAAI,CAAC,UAAC,EAAW;YAAV,wBAAS;QAC3B,IAAM,qBAAqB,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;QAC7D,OAAO,sBAAe,CACX,CAAC,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC,CAAC;YAC9D,gBAAgB,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,SAAS,gBAAgB,CACrB,aAAqB,EAAE,gBAAwB,EAC/C,iBAA6B;IAC/B,IAAI,2BAA2B,GAAG,iBAAiB,CAAC,MAAM,CACtD,UAAC,MAAM,EAAE,EAAiB,EAAE,UAAU;YAA5B,sBAAQ,EAAE,gBAAK;QACvB,IAAI,CAAC,mCAAmC,CAChC,aAAa,EAAE,gBAAgB,EAAE,QAAQ,EAAE,UAAU,CAAC,EAAE;YAC9D,MAAM,IAAI,KAAK,CAAC;SACjB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC,CAAC;IAEZ,OAAO,2BAA2B,IAAI,iBAAiB,CAAC,MAAM,CAAC;AACjE,CAAC;AAED,wEAAwE;AACxE,mEAAmE;AACnE,uBAAuB;AACvB,IAAM,mBAAmB,GAAG,CAAC,CAAC;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH,SAAgB,mBAAmB,CAC/B,YAA4B,EAAE,aAA6B,EAC3D,sBAAsC,EACtC,sBAAsC,EAAE,YAAoB,EAC5D,iBAAyB,EAAE,cAAoB,EAAE,SAAc;IAApC,+BAAA,EAAA,oBAAoB;IAAE,0BAAA,EAAA,cAAc;IACjE,IAAM,KAAK,GAAW,EAAE,CAAC;IAEzB,IAAM,KAAK,GAAG,qDAAuB,CACjC,cAAc,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAEvD,IAAM,gBAAgB,GAAG,SAAS,GAAG,SAAS,CAAC;IAE/C,+DAA+D;IAC/D,oCAAoC;IACpC,OAAO,KAAK,CAAC,MAAM,GAAG,iBAAiB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;QACzD,2DAA2D;QAC3D,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAE7B,uEAAuE;QACvE,wEAAwE;QACxE,kCAAkC;QAClC,IAAM,eAAe,GACjB,qBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QAC3D,IAAI,mCAAmC,CAC/B,KAAK,EAAE,gBAAgB,EAAE,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YAC/D,SAAS;SACV;QAED,8DAA8D;QAC9D,IAAM,SAAS,GAAG,wBAAU,CACxB,IAAI,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,sBAAsB,EACvE,sBAAsB,CAAC,CAAC;QAE5B,IAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAEnE,KAAK,CAAC,IAAI,CAAC,EAAC,SAAS,WAAA,EAAE,KAAK,OAAA,EAAC,CAAC,CAAC;KAChC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAvCD,kDAuCC","sourcesContent":[null]}},"error":null,"hash":"018ba3f71d7b2a65d7abcab26329af60","cacheData":{"env":{}}}