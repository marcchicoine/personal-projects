{"version":3,"file":"body-pix.min.js","sources":["../src/decode_part_map.ts","../src/base_model.ts","../src/mobilenet.ts","../src/keypoints.ts","../src/multi_person/util.ts","../src/multi_person/decode_multiple_masks_cpu.ts","../src/multi_person/decode_multiple_masks_webgl.ts","../src/multi_person/decode_instance_masks.ts","../src/multi_person/max_heap.ts","../src/multi_person/build_part_with_score_queue.ts","../src/multi_person/decode_pose.ts","../src/multi_person/decode_multiple_poses.ts","../src/resnet.ts","../src/saved_models.ts","../src/util.ts","../src/body_pix_model.ts","../src/output_rendering_util.ts","../src/blur.ts","../src/part_channels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n/**\n * Takes the sigmoid of the part heatmap output and generates a 2d one-hot\n * tensor with ones where the part's score has the maximum value.\n *\n * @param partHeatmapScores\n */\nfunction toFlattenedOneHotPartMap(partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\n  const numParts = partHeatmapScores.shape[2];\n  const partMapLocations = tf.argMax(partHeatmapScores, 2);\n\n  const partMapFlattened = tf.reshape(partMapLocations, [-1]);\n\n  return tf.oneHot(partMapFlattened, numParts) as tf.Tensor2D;\n}\n\nfunction clipByMask2d(image: tf.Tensor2D, mask: tf.Tensor2D): tf.Tensor2D {\n  return tf.mul(image, mask);\n}\n\n/**\n * Takes the sigmoid of the segmentation output, and generates a segmentation\n * mask with a 1 or 0 at each pixel where there is a person or not a person. The\n * segmentation threshold determines the threshold of a score for a pixel for it\n * to be considered part of a person.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param segmentationThreshold The minimum that segmentation values must have\n * to be considered part of the person.  Affects the generation of the\n * segmentation mask and the clipping of the colored part image.\n *\n * @returns A segmentation mask with a 1 or 0 at each pixel where there is a\n * person or not a person.\n */\nexport function toMaskTensor(\n    segmentScores: tf.Tensor2D, threshold: number): tf.Tensor2D {\n  return tf.tidy(\n      () =>\n          (tf.cast(tf.greater(\n              segmentScores, tf.scalar(threshold)), 'int32') as tf.Tensor2D));\n}\n\n/**\n * Takes the sigmoid of the person and part map output, and returns a 2d tensor\n * of an image with the corresponding value at each pixel corresponding to the\n * part with the highest value. These part ids are clipped by the segmentation\n * mask. Wherever the a pixel is clipped by the segmentation mask, its value\n * will set to -1, indicating that there is no part in that pixel.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param partHeatmapScores A 3d-tensor of the sigmoid of the part heatmap\n * output. The third dimension corresponds to the part.\n *\n * @returns A 2d tensor of an image with the corresponding value at each pixel\n * corresponding to the part with the highest value. These part ids are clipped\n * by the segmentation mask.  It will have values of -1 for pixels that are\n * outside of the body and do not have a corresponding part.\n */\nexport function decodePartSegmentation(\n    segmentationMask: tf.Tensor2D,\n    partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\n  return tf.tidy(() => {\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    const partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n\n    const partMapFlattened =\n        tf.cast(tf.matMul(flattenedMap, partNumbers as tf.Tensor2D), 'int32');\n\n    const partMap = tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n\n    const partMapShiftedUpForClipping = tf.add(partMap, tf.scalar(1, 'int32'));\n\n    return tf.sub(clipByMask2d(\n               partMapShiftedUpForClipping as tf.Tensor2D, segmentationMask)\n        , tf.scalar(1, 'int32'));\n  });\n}\n\nexport function decodeOnlyPartSegmentation(partHeatmapScores: tf.Tensor3D):\n    tf.Tensor2D {\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\n  return tf.tidy(() => {\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    const partNumbers = tf.expandDims(tf.range(0, numParts, 1, 'int32'), 1);\n\n    const partMapFlattened =\n        tf.cast(tf.matMul(flattenedMap, partNumbers as tf.Tensor2D), 'int32');\n\n    return tf.reshape(partMapFlattened, [partMapHeight, partMapWidth]);\n  });\n}\n","\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BodyPixOutputStride} from './types';\n\n/**\n * BodyPix supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such BodyPix base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to BodyPix.\n */\nexport abstract class BaseModel {\n  constructor(\n      protected readonly model: tfconv.GraphModel,\n      public readonly outputStride: BodyPixOutputStride) {\n    const inputShape =\n        this.model.inputs[0].shape as [number, number, number, number];\n    tf.util.assert(\n        (inputShape[1] === -1) && (inputShape[2] === -1),\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\n            `must both be equal to or -1`);\n  }\n\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\n\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * - heatmapScores: A Tensor3D that represents the keypoint heatmap scores.\n   * - offsets: A Tensor3D that represents the offsets.\n   * - displacementFwd: A Tensor3D that represents the forward displacement.\n   * - displacementBwd: A Tensor3D that represents the backward displacement.\n   * - segmentation: A Tensor3D that represents the segmentation of all\n   * people.\n   * - longOffsets: A Tensor3D that represents the long offsets used for\n   * instance grouping.\n   * - partHeatmaps: A Tensor3D that represents the body part segmentation.\n   */\n  predict(input: tf.Tensor3D): {\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    segmentation: tf.Tensor3D,\n    partHeatmaps: tf.Tensor3D,\n    longOffsets: tf.Tensor3D,\n    partOffsets: tf.Tensor3D\n  } {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(tf.cast(input, 'float32'));\n      const asBatch = tf.expandDims(asFloat, 0);\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\n      const results3d: tf.Tensor3D[] = results.map(y => tf.squeeze(y, [0]));\n      const namedResults = this.nameOutputResults(results3d);\n\n      return {\n        heatmapScores: tf.sigmoid(namedResults.heatmap),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd,\n        segmentation: namedResults.segmentation,\n        partHeatmaps: namedResults.partHeatmaps,\n        longOffsets: namedResults.longOffsets,\n        partOffsets: namedResults.partOffsets\n      };\n    });\n  }\n\n  // Because MobileNet and ResNet predict() methods output a different order for\n  // these values, we have a method that needs to be implemented to order them.\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\n    heatmap: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    segmentation: tf.Tensor3D,\n    partHeatmaps: tf.Tensor3D,\n    longOffsets: tf.Tensor3D,\n    partOffsets: tf.Tensor3D\n  };\n\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  dispose() {\n    this.model.dispose();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nexport class MobileNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.sub(tf.div(input, 127.5), 1.0));\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets,\n  ] = results;\n    return {\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport type Tuple<T> = [T, T];\nexport type StringTuple = Tuple<string>;\nexport type NumberTuple = Tuple<number>;\n\nexport const PART_NAMES = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\n];\n\nexport const NUM_KEYPOINTS = PART_NAMES.length;\n\nexport interface NumberDict {\n  [jointName: string]: number;\n}\n\nexport const PART_IDS =\n    PART_NAMES.reduce((result: NumberDict, jointName, i): NumberDict => {\n      result[jointName] = i;\n      return result;\n    }, {});\n\nconst CONNECTED_PART_NAMES: StringTuple[] = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\n];\n\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexport const POSE_CHAIN: StringTuple[] = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle']\n];\n\nexport const CONNECTED_PART_INDICES = CONNECTED_PART_NAMES.map(\n    ([jointNameA, jointNameB]) =>\n        ([PART_IDS[jointNameA], PART_IDS[jointNameB]]));\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Part, TensorBuffer3D, Vector2D} from '../types';\n\nexport function getScale(\n    [height, width]: [number, number],\n    [inputResolutionY, inputResolutionX]: [number, number],\n    padding: Padding): [number, number] {\n  const {top: padT, bottom: padB, left: padL, right: padR} = padding;\n  const scaleY = inputResolutionY / (padT + padB + height);\n  const scaleX = inputResolutionX / (padL + padR + width);\n  return [scaleX, scaleY];\n}\n\nexport function getOffsetPoint(\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getImageCoords(\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\n  const {heatmapY, heatmapX, id: keypoint} = part;\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\n\nexport function fillArray<T>(element: T, size: number): T[] {\n  const result: T[] = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n\n  return result;\n}\n\nexport function clamp(a: number, min: number, max: number): number {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\n\nexport function squaredDistance(\n    y1: number, x1: number, y2: number, x2: number): number {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Pose} from '../types';\n\nimport {getScale} from './util';\n\ninterface Pair {\n  x: number;\n  y: number;\n}\n\nfunction computeDistance(embedding: Pair[], pose: Pose, minPartScore = 0.3) {\n  let distance = 0.0;\n  let numKpt = 0;\n  for (let p = 0; p < embedding.length; p++) {\n    if (pose.keypoints[p].score > minPartScore) {\n      numKpt += 1;\n      distance += (embedding[p].x - pose.keypoints[p].position.x) ** 2 +\n          (embedding[p].y - pose.keypoints[p].position.y) ** 2;\n    }\n  }\n  if (numKpt === 0) {\n    distance = Infinity;\n  } else {\n    distance = distance / numKpt;\n  }\n  return distance;\n}\n\nfunction convertToPositionInOuput(\n    position: Pair, [padT, padL]: [number, number],\n    [scaleX, scaleY]: [number, number], stride: number): Pair {\n  const y = Math.round(((padT + position.y + 1.0) * scaleY - 1.0) / stride);\n  const x = Math.round(((padL + position.x + 1.0) * scaleX - 1.0) / stride);\n  return {x, y};\n}\n\nfunction getEmbedding(\n    location: Pair, keypointIndex: number,\n    convertToPosition: (pair: Pair) => Pair, outputResolutionX: number,\n    longOffsets: Float32Array, refineSteps: number,\n    [height, width]: [number, number]): Pair {\n  const newLocation = convertToPosition(location);\n\n  const nn = newLocation.y * outputResolutionX + newLocation.x;\n  let dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n  let dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n  let y = location.y + dy;\n  let x = location.x + dx;\n  for (let t = 0; t < refineSteps; t++) {\n    y = Math.min(y, height - 1);\n    x = Math.min(x, width - 1);\n    const newPos = convertToPosition({x, y});\n    const nn = newPos.y * outputResolutionX + newPos.x;\n    dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n    dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n    y = y + dy;\n    x = x + dx;\n  }\n\n  return {x, y};\n}\n\nfunction matchEmbeddingToInstance(\n    location: Pair, longOffsets: Float32Array, poses: Pose[],\n    numKptForMatching: number, [padT, padL]: [number, number],\n    [scaleX, scaleY]: [number, number], outputResolutionX: number,\n    [height, width]: [number, number], stride: number,\n    refineSteps: number): number {\n  const embed: Pair[] = [];\n  const convertToPosition = (pair: Pair) =>\n      convertToPositionInOuput(pair, [padT, padL], [scaleX, scaleY], stride);\n\n  for (let keypointsIndex = 0; keypointsIndex < numKptForMatching;\n       keypointsIndex++) {\n    const embedding = getEmbedding(\n        location, keypointsIndex, convertToPosition, outputResolutionX,\n        longOffsets, refineSteps, [height, width]);\n\n    embed.push(embedding);\n  }\n\n  let kMin = -1;\n  let kMinDist = Infinity;\n  for (let k = 0; k < poses.length; k++) {\n    const dist = computeDistance(embed, poses[k]);\n    if (dist < kMinDist) {\n      kMin = k;\n      kMinDist = dist;\n    }\n  }\n  return kMin;\n}\n\nfunction getOutputResolution(\n    [inputResolutionY, inputResolutionX]: [number, number],\n    stride: number): [number, number] {\n  const outputResolutionX = Math.round((inputResolutionX - 1.0) / stride + 1.0);\n  const outputResolutionY = Math.round((inputResolutionY - 1.0) / stride + 1.0);\n  return [outputResolutionX, outputResolutionY];\n}\n\nexport function decodeMultipleMasksCPU(\n    segmentation: Uint8Array, longOffsets: Float32Array,\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding,\n    refineSteps: number, numKptForMatching = 5): Uint8Array[] {\n  const dataArrays =\n      posesAboveScore.map(x => new Uint8Array(height * width).fill(0));\n\n  const {top: padT, left: padL} = padding;\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n  const [outputResolutionX, ] =\n    getOutputResolution([inHeight, inWidth], stride);\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      const prob = segmentation[n];\n      if (prob === 1) {\n        const kMin = matchEmbeddingToInstance(\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\n            stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = 1;\n        }\n      }\n    }\n  }\n\n  return dataArrays;\n}\n\nexport function decodeMultiplePartMasksCPU(\n    segmentation: Uint8Array, longOffsets: Float32Array,\n    partSegmentaion: Uint8Array, posesAboveScore: Pose[], height: number,\n    width: number, stride: number, [inHeight, inWidth]: [number, number],\n    padding: Padding, refineSteps: number,\n    numKptForMatching = 5): Int32Array[] {\n  const dataArrays =\n      posesAboveScore.map(x => new Int32Array(height * width).fill(-1));\n\n  const {top: padT, left: padL} = padding;\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n  const [outputResolutionX, ] =\n    getOutputResolution([inHeight, inWidth], stride);\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      const prob = segmentation[n];\n      if (prob === 1) {\n        const kMin = matchEmbeddingToInstance(\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\n            stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = partSegmentaion[n];\n        }\n      }\n    }\n  }\n\n  return dataArrays;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as tf_webgl from '@tensorflow/tfjs-backend-webgl';\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Pose} from '../types';\nimport {getScale} from './util';\n\nexport function decodeMultipleMasksWebGl(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding,\n    refineSteps: number, minKptScore: number,\n    maxNumPeople: number): tf.TensorInfo {\n  // The height/width of the image/canvas itself.\n  const [origHeight, origWidth] = segmentation.shape;\n  // The height/width of the output of the model.\n  const [outHeight, outWidth] = longOffsets.shape.slice(0, 2);\n\n  const shapedLongOffsets: tf.Tensor4D =\n      tf.reshape(longOffsets, [outHeight, outWidth, 2, NUM_KEYPOINTS]);\n\n  // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\n  // the last 3 coordinates correspond to the score, h and w coordinate of that\n  // keypoint.\n  const poseVals = new Float32Array(maxNumPeople * NUM_KEYPOINTS * 3).fill(0.0);\n  for (let i = 0; i < posesAboveScore.length; i++) {\n    const poseOffset = i * NUM_KEYPOINTS * 3;\n    const pose = posesAboveScore[i];\n    for (let kp = 0; kp < NUM_KEYPOINTS; kp++) {\n      const keypoint = pose.keypoints[kp];\n      const offset = poseOffset + kp * 3;\n      poseVals[offset] = keypoint.score;\n      poseVals[offset + 1] = keypoint.position.y;\n      poseVals[offset + 2] = keypoint.position.x;\n    }\n  }\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n\n  const posesTensor = tf.tensor(poseVals, [maxNumPeople, NUM_KEYPOINTS, 3]);\n\n  const {top: padT, left: padL} = padding;\n\n  const program: tf_webgl.GPGPUProgram = {\n    variableNames: ['segmentation', 'longOffsets', 'poses'],\n    outputShape: [origHeight, origWidth],\n    userCode: `\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, ${padT}, ${scaleY}, ${stride});\n      float stridedW = convertToPositionInOutputFloat(\n        w, ${padL}, ${scaleX}, ${stride});\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < ${maxNumPeople}; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < ${NUM_KEYPOINTS}; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < ${refineSteps}; s++) {\n            int yRounded = round(min(y, float(${height - 1.0})));\n            int xRounded = round(min(x, float(${width - 1.0})));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, ${padT}, ${scaleY}, ${stride});\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, ${padL}, ${scaleX}, ${stride});\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > ${minKptScore}) {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  `\n  };\n  const webglBackend = tf.backend() as tf_webgl.MathBackendWebGL;\n  return webglBackend.compileAndRun(\n      program, [segmentation, shapedLongOffsets, posesTensor]);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {getBackend} from '@tensorflow/tfjs-core';\n\nimport {Padding, PartSegmentation, PersonSegmentation, Pose} from '../types';\n\nimport {decodeMultipleMasksCPU, decodeMultiplePartMasksCPU} from './decode_multiple_masks_cpu';\nimport {decodeMultipleMasksWebGl} from './decode_multiple_masks_webgl';\n\nexport function toPersonKSegmentation(\n    segmentation: tf.Tensor2D, k: number): tf.Tensor2D {\n  return tf.tidy(\n      () => (tf.cast(tf.equal(\n          segmentation, tf.scalar(k)), 'int32') as tf.Tensor2D));\n}\n\nexport function toPersonKPartSegmentation(\n    segmentation: tf.Tensor2D, bodyParts: tf.Tensor2D, k: number): tf.Tensor2D {\n  return tf.tidy(\n      () => tf.sub(tf.mul(tf.cast(tf.equal(\n          segmentation, tf.scalar(k)), 'int32'), tf.add(bodyParts, 1)), 1));\n}\n\nfunction isWebGlBackend() {\n  return getBackend() === 'webgl';\n}\n\nexport async function decodePersonInstanceMasks(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D, poses: Pose[],\n    height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding, minPoseScore = 0.2,\n    refineSteps = 8, minKeypointScore = 0.3,\n    maxNumPeople = 10): Promise<PersonSegmentation[]> {\n  // Filter out poses with smaller score.\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\n\n  let personSegmentationsData: Uint8Array[];\n\n  if (isWebGlBackend()) {\n    const personSegmentations = tf.tidy(() => {\n      const masksTensorInfo = decodeMultipleMasksWebGl(\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\n          maxNumPeople);\n      const masksTensor = tf.engine().makeTensorFromDataId(\n          masksTensorInfo.dataId, masksTensorInfo.shape,\n          masksTensorInfo.dtype) as tf.Tensor2D;\n\n      return posesAboveScore.map(\n          (_, k) => toPersonKSegmentation(masksTensor, k));\n    });\n\n    personSegmentationsData =\n        (await Promise.all(personSegmentations.map(mask => mask.data())) as\n         Uint8Array[]);\n\n    personSegmentations.forEach(x => x.dispose());\n  } else {\n    const segmentationsData = await segmentation.data() as Uint8Array;\n    const longOffsetsData = await longOffsets.data() as Float32Array;\n\n    personSegmentationsData = decodeMultipleMasksCPU(\n        segmentationsData, longOffsetsData, posesAboveScore, height, width,\n        stride, [inHeight, inWidth], padding, refineSteps);\n  }\n\n  return personSegmentationsData.map(\n      (data, i) => ({data, pose: posesAboveScore[i], width, height}));\n}\n\nexport async function decodePersonInstancePartMasks(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\n    partSegmentation: tf.Tensor2D, poses: Pose[], height: number, width: number,\n    stride: number, [inHeight, inWidth]: [number, number], padding: Padding,\n    minPoseScore = 0.2, refineSteps = 8, minKeypointScore = 0.3,\n    maxNumPeople = 10): Promise<PartSegmentation[]> {\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\n\n  let partSegmentationsByPersonData: Int32Array[];\n\n  if (isWebGlBackend()) {\n    const partSegmentations = tf.tidy(() => {\n      const masksTensorInfo = decodeMultipleMasksWebGl(\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\n          maxNumPeople);\n      const masksTensor = tf.engine().makeTensorFromDataId(\n        masksTensorInfo.dataId, masksTensorInfo.shape,\n        masksTensorInfo.dtype) as tf.Tensor2D;\n\n      return posesAboveScore.map(\n          (_, k) =>\n              toPersonKPartSegmentation(masksTensor, partSegmentation, k));\n    });\n\n    partSegmentationsByPersonData =\n        (await Promise.all(partSegmentations.map(x => x.data()))) as\n        Int32Array[];\n\n    partSegmentations.forEach(x => x.dispose());\n  } else {\n    const segmentationsData = await segmentation.data() as Uint8Array;\n    const longOffsetsData = await longOffsets.data() as Float32Array;\n    const partSegmentaionData = await partSegmentation.data() as Uint8Array;\n\n    partSegmentationsByPersonData = decodeMultiplePartMasksCPU(\n        segmentationsData, longOffsetsData, partSegmentaionData,\n        posesAboveScore, height, width, stride, [inHeight, inWidth], padding,\n        refineSteps);\n  }\n\n  return partSegmentationsByPersonData.map(\n      (data, k) => ({pose: posesAboveScore[k], data, height, width}));\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\n\nfunction half(k: number) {\n  return Math.floor(k / 2);\n}\n\nexport class MaxHeap<T> {\n  private priorityQueue: T[];\n  private numberOfElements: number;\n  private getElementValue: (element: T) => number;\n\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  public enqueue(x: T): void {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  public dequeue(): T {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  public empty(): boolean {\n    return this.numberOfElements === -1;\n  }\n\n  public size(): number {\n    return this.numberOfElements + 1;\n  }\n\n  public all(): T[] {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  public max(): T {\n    return this.priorityQueue[0];\n  }\n\n  private swim(k: number): void {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  private sink(k: number): void {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  private getValueAt(i: number): number {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  private less(i: number, j: number): boolean {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  private exchange(i: number, j: number): void {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PartWithScore, TensorBuffer3D} from '../types';\n\nimport {MaxHeap} from './max_heap';\n\nfunction scoreIsMaximumInLocalWindow(\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\n  const [height, width] = scores.shape;\n\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n\n  return localMaximum;\n}\n\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nexport function buildPartWithScoreQueue(\n    scoreThreshold: number, localMaximumRadius: number,\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\n  const [height, width, numKeypoints] = scores.shape;\n\n  const queue = new MaxHeap<PartWithScore>(\n      height * width * numKeypoints, ({score}) => score);\n\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\n                scores)) {\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\n        }\n      }\n    }\n  }\n\n  return queue;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumberTuple, PART_IDS, PART_NAMES, POSE_CHAIN} from '../keypoints';\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\n\nimport {clamp, getOffsetPoint} from './util';\nimport {addVectors, getImageCoords} from './util';\n\nconst parentChildrenTuples: NumberTuple[] = POSE_CHAIN.map(\n    ([parentJoinName, childJoinName]): NumberTuple =>\n        ([PART_IDS[parentJoinName], PART_IDS[childJoinName]]));\n\nconst parentToChildEdges: number[] =\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\n\nconst childToParentEdges: number[] =\n    parentChildrenTuples.map(([\n                               parentJointId,\n                             ]) => parentJointId);\n\nfunction getDisplacement(\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\n\nfunction getStridedIndexNearPoint(\n    point: Vector2D, outputStride: number, height: number,\n    width: number): Vector2D {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\n  const [height, width] = scoresBuffer.shape;\n\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(\n      sourceKeypoint.position, outputStride, height, width);\n\n  const displacement =\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\n\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices =\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n\n    const offsetPoint = getOffsetPoint(\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\n        offsets);\n\n    targetKeypoint = addVectors(\n        {\n          x: targetKeypointIndices.x * outputStride,\n          y: targetKeypointIndices.y * outputStride\n        },\n        {x: offsetPoint.x, y: offsetPoint.y});\n  }\n  const targetKeyPointIndices =\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n\n  return {position: targetKeypoint, part: PART_NAMES[targetKeypointId], score};\n}\n\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nexport function decodePose(\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\n    outputStride: number, displacementsFwd: TensorBuffer3D,\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const {part: rootPart, score: rootScore} = root;\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\n\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: PART_NAMES[rootPart.id],\n    position: rootPoint\n  };\n\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsBwd);\n    }\n  }\n\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsFwd);\n    }\n  }\n\n  return instanceKeypoints;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\n\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\nimport {decodePose} from './decode_pose';\nimport {getImageCoords, squaredDistance} from './util';\n\nfunction withinNmsRadiusOfCorrespondingPoint(\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\n    keypointId: number): boolean {\n  return poses.some(({keypoints}) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n        squaredNmsRadius;\n  });\n}\n\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(\n    existingPoses: Pose[], squaredNmsRadius: number,\n    instanceKeypoints: Keypoint[]): number {\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\n      (result, {position, score}, keypointId): number => {\n        if (!withinNmsRadiusOfCorrespondingPoint(\n                existingPoses, squaredNmsRadius, position, keypointId)) {\n          result += score;\n        }\n        return result;\n      }, 0.0);\n\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nexport function decodeMultiplePoses(\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\n    displacementsFwdBuffer: TensorBuffer3D,\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\n  const poses: Pose[] = [];\n\n  const queue = buildPartWithScoreQueue(\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords =\n        getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose(\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\n        displacementsBwdBuffer);\n\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n\n    poses.push({keypoints, score});\n  }\n\n  return poses;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nconst imageNetMean = [-123.15, -115.90, -103.06];\n\nexport class ResNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    return tf.add(input, imageNetMean);\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [\n      displacementBwd,\n      displacementFwd,\n      heatmap,\n      longOffsets,\n      offsets,\n      partHeatmaps,\n      segmentation,\n      partOffsets,\n  ] = results;\n    return {\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst RESNET50_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/';\nconst MOBILENET_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/';\n\n// The BodyPix 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function resNet50SavedModel(stride: number, quantBytes: number): string {\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + `float/` + graphJson;\n  } else {\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\n  }\n}\n\n// The BodyPix 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function mobileNetSavedModel(\n    stride: number, multiplier: number, quantBytes: number): string {\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\n        graphJson;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BodyPixInput, BodyPixOutputStride, Padding} from './types';\nimport {Pose, TensorBuffer3D} from './types';\nimport {BodyPixInternalResolution} from './types';\n\nfunction getSizeFromImageLikeElement(input: HTMLImageElement|\n                                     HTMLCanvasElement|\n                                     OffscreenCanvas): [number, number] {\n  if ('offsetHeight' in input && input.offsetHeight !== 0\n      && 'offsetWidth' in input && input.offsetWidth !== 0) {\n    return [input.offsetHeight, input.offsetWidth];\n  } else if (input.height != null && input.width != null) {\n    return [input.height, input.width];\n  } else {\n    throw new Error(\n        `HTMLImageElement must have height and width attributes set.`);\n  }\n}\n\nfunction getSizeFromVideoElement(input: HTMLVideoElement): [number, number] {\n  if (input.hasAttribute('height') && input.hasAttribute('width')) {\n    // Prioritizes user specified height and width.\n    // We can't test the .height and .width properties directly,\n    // because they evaluate to 0 if unset.\n    return [input.height, input.width];\n  } else {\n    return [input.videoHeight, input.videoWidth];\n  }\n}\n\nexport function getInputSize(input: BodyPixInput): [number, number] {\n  if ((typeof (HTMLCanvasElement) !== 'undefined' &&\n       input instanceof HTMLCanvasElement) ||\n      (typeof (OffscreenCanvas) !== 'undefined' &&\n          input instanceof OffscreenCanvas) ||\n      (typeof (HTMLImageElement) !== 'undefined' &&\n       input instanceof HTMLImageElement)) {\n    return getSizeFromImageLikeElement(input);\n  } else if (typeof (ImageData) !== 'undefined' && input instanceof ImageData) {\n    return [input.height, input.width];\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      input instanceof HTMLVideoElement) {\n    return getSizeFromVideoElement(input);\n  } else if (input instanceof tf.Tensor) {\n    return [input.shape[0], input.shape[1]];\n  } else {\n    throw new Error(`error: Unknown input type: ${input}.`);\n  }\n}\n\nfunction isValidInputResolution(\n    resolution: number, outputStride: number): boolean {\n  return (resolution - 1) % outputStride === 0;\n}\n\nexport function toValidInputResolution(\n    inputResolution: number, outputStride: BodyPixOutputStride): number {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\n\nconst INTERNAL_RESOLUTION_STRING_OPTIONS = {\n  low: 'low',\n  medium: 'medium',\n  high: 'high',\n  full: 'full'\n};\n\nconst INTERNAL_RESOLUTION_PERCENTAGES = {\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.low]: 0.25,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.medium]: 0.5,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.high]: 0.75,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.full]: 1.0\n};\n\nconst MIN_INTERNAL_RESOLUTION = 0.1;\nconst MAX_INTERNAL_RESOLUTION = 2.0;\n\nfunction toInternalResolutionPercentage(\n    internalResolution: BodyPixInternalResolution): number {\n  if (typeof internalResolution === 'string') {\n    const result = INTERNAL_RESOLUTION_PERCENTAGES[internalResolution];\n\n    tf.util.assert(\n        typeof result === 'number',\n        () => `string value of inputResolution must be one of ${\n            Object.values(INTERNAL_RESOLUTION_STRING_OPTIONS)\n                .join(',')} but was ${internalResolution}.`);\n    return result;\n  } else {\n    tf.util.assert(\n        typeof internalResolution === 'number' &&\n            internalResolution <= MAX_INTERNAL_RESOLUTION &&\n            internalResolution >= MIN_INTERNAL_RESOLUTION,\n        () =>\n            `inputResolution must be a string or number between ${\n                MIN_INTERNAL_RESOLUTION} and ${MAX_INTERNAL_RESOLUTION}, but ` +\n            `was ${internalResolution}`);\n\n    return internalResolution;\n  }\n}\n\nexport function toInputResolutionHeightAndWidth(\n    internalResolution: BodyPixInternalResolution,\n    outputStride: BodyPixOutputStride,\n    [inputHeight, inputWidth]: [number, number]): [number, number] {\n  const internalResolutionPercentage =\n      toInternalResolutionPercentage(internalResolution);\n\n  return [\n    toValidInputResolution(\n        inputHeight * internalResolutionPercentage, outputStride),\n    toValidInputResolution(\n        inputWidth * internalResolutionPercentage, outputStride)\n  ];\n}\n\nexport function toInputTensor(input: BodyPixInput) {\n  // TODO: tf.browser.fromPixels types to support OffscreenCanvas\n  // @ts-ignore\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\n\nexport function resizeAndPadTo(\n    imageTensor: tf.Tensor3D, [targetH, targetW]: [number, number],\n    flipHorizontal = false): {\n  resizedAndPadded: tf.Tensor3D,\n  paddedBy: [[number, number], [number, number]]\n} {\n  const [height, width] = imageTensor.shape;\n\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n\n  let resizeW: number;\n  let resizeH: number;\n  let padL: number;\n  let padR: number;\n  let padT: number;\n  let padB: number;\n\n  if (aspect > targetAspect) {\n    // resize to have the larger dimension match the shape.\n    resizeW = targetW;\n    resizeH = Math.ceil(resizeW / aspect);\n\n    const padHeight = targetH - resizeH;\n    padL = 0;\n    padR = 0;\n    padT = Math.floor(padHeight / 2);\n    padB = targetH - (resizeH + padT);\n  } else {\n    resizeH = targetH;\n    resizeW = Math.ceil(targetH * aspect);\n\n    const padWidth = targetW - resizeW;\n    padL = Math.floor(padWidth / 2);\n    padR = targetW - (resizeW + padL);\n    padT = 0;\n    padB = 0;\n  }\n\n  const resizedAndPadded = tf.tidy(() => {\n    // resize to have largest dimension match image\n    let resized: tf.Tensor3D;\n    if (flipHorizontal) {\n      resized = tf.image.resizeBilinear(\n          tf.reverse(imageTensor, 1), [resizeH, resizeW]);\n    } else {\n      resized = tf.image.resizeBilinear(imageTensor, [resizeH, resizeW]);\n    }\n\n    const padded = tf.pad3d(resized, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return padded;\n  });\n\n  return {resizedAndPadded, paddedBy: [[padT, padB], [padL, padR]]};\n}\n\nexport function scaleAndCropToInputTensorShape(\n    tensor: tf.Tensor3D,\n    [inputTensorHeight, inputTensorWidth]: [number, number],\n    [resizedAndPaddedHeight, resizedAndPaddedWidth]: [number, number],\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]],\n    applySigmoidActivation = false): tf.Tensor3D {\n  return tf.tidy(() => {\n    let inResizedAndPadded: tf.Tensor3D = tf.image.resizeBilinear(tensor,\n        [resizedAndPaddedHeight, resizedAndPaddedWidth], true);\n\n    if (applySigmoidActivation) {\n      inResizedAndPadded = tf.sigmoid(inResizedAndPadded);\n    }\n\n    return removePaddingAndResizeBack(\n        inResizedAndPadded, [inputTensorHeight, inputTensorWidth],\n        [[padT, padB], [padL, padR]]);\n  });\n}\n\nexport function removePaddingAndResizeBack(\n    resizedAndPadded: tf.Tensor3D,\n    [originalHeight, originalWidth]: [number, number],\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]]):\n    tf.Tensor3D {\n  return tf.tidy(() => {\n    const batchedImage: tf.Tensor4D = tf.expandDims(resizedAndPadded);\n    return tf.squeeze(tf.image\n        .cropAndResize(\n            batchedImage, [[\n              padT / (originalHeight + padT + padB - 1.0),\n              padL / (originalWidth + padL + padR - 1.0),\n              (padT + originalHeight - 1.0) /\n                  (originalHeight + padT + padB - 1.0),\n              (padL + originalWidth - 1.0) / (originalWidth + padL + padR - 1.0)\n            ]],\n            [0], [originalHeight, originalWidth]), [0]);\n  });\n}\n\nexport function resize2d(\n    tensor: tf.Tensor2D, resolution: [number, number],\n    nearestNeighbor?: boolean): tf.Tensor2D {\n  return tf.tidy(() => {\n    const batchedImage: tf.Tensor4D = tf.expandDims(tensor, 2);\n    return tf.squeeze(\n        tf.image.resizeBilinear(batchedImage, resolution, nearestNeighbor));\n  });\n}\n\nexport function padAndResizeTo(\n    input: BodyPixInput, [targetH, targetW]: [number, number]):\n    {resized: tf.Tensor3D, padding: Padding} {\n  const [height, width] = getInputSize(input);\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padL = 0;\n    padR = 0;\n  }\n\n  const resized: tf.Tensor3D = tf.tidy(() => {\n    let imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return tf.image.resizeBilinear(imageTensor, [targetH, targetW]);\n  });\n\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\n}\n\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\n    Promise<TensorBuffer3D[]> {\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\n}\n\nexport function scalePose(\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\n    offsetX = 0): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\n                                    score,\n                                    part,\n                                    position: {\n                                      x: position.x * scaleX + offsetX,\n                                      y: position.y * scaleY + offsetY\n                                    }\n                                  }))\n  };\n}\n\nexport function scalePoses(\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\n}\n\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(\n        ({score, part, position}) => ({\n          score,\n          part,\n          position: {x: imageWidth - 1 - position.x, y: position.y}\n        }))\n  };\n}\n\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\n}\n\nexport function scaleAndFlipPoses(\n    poses: Pose[], [height, width]: [number, number],\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\n    padding: Padding, flipHorizontal: boolean): Pose[] {\n  const scaleY =\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\n  const scaleX =\n      (width + padding.left + padding.right) / (inputResolutionWidth);\n\n  const scaledPoses =\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n","\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\nimport {decodeOnlyPartSegmentation, decodePartSegmentation, toMaskTensor} from './decode_part_map';\nimport {MobileNet} from './mobilenet';\nimport {decodePersonInstanceMasks, decodePersonInstancePartMasks} from './multi_person/decode_instance_masks';\nimport {decodeMultiplePoses} from './multi_person/decode_multiple_poses';\nimport {ResNet} from './resnet';\nimport {mobileNetSavedModel, resNet50SavedModel} from './saved_models';\nimport {BodyPixArchitecture, BodyPixInput, BodyPixInternalResolution, BodyPixMultiplier, BodyPixOutputStride, BodyPixQuantBytes, Padding} from './types';\nimport {PartSegmentation, PersonSegmentation, SemanticPartSegmentation, SemanticPersonSegmentation} from './types';\nimport {getInputSize, padAndResizeTo, scaleAndCropToInputTensorShape, scaleAndFlipPoses, toInputResolutionHeightAndWidth, toTensorBuffers3D} from './util';\n\nconst APPLY_SIGMOID_ACTIVATION = true;\nconst FLIP_POSES_AFTER_SCALING = false;\n\n/**\n * BodyPix model loading is configurable using the following config dictionary.\n *\n * `architecture`: BodyPixArchitecture. It determines which BodyPix architecture\n * to load. The supported architectures are: MobileNetV1 and ResNet50.\n *\n * `outputStride`: Specifies the output stride of the BodyPix model.\n * The smaller the value, the larger the output resolution, and more accurate\n * the model at the cost of speed. Set this to a larger value to increase speed\n * at the cost of accuracy. Stride 32 is supported for ResNet and\n * stride 8,16,32 are supported for various MobileNetV1 models.\n *\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\n * 0.50. The value is used only by MobileNet architecture. It is the float\n * multiplier for the depth (number of channels) for all convolution ops.\n * The larger the value, the larger the size of the layers, and more accurate\n * the model at the cost of speed. Set this to a smaller value to increase speed\n * at the cost of accuracy.\n *\n * `modelUrl`: An optional string that specifies custom url of the model. This\n * is useful for area/countries that don't have access to the model hosted on\n * GCP.\n *\n * `quantBytes`: An optional number with values: 1, 2, or 4.  This parameter\n * affects weight quantization in the models. The available options are\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\n * and thus the longer the loading time, the lower the value, the shorter the\n * loading time but lower the accuracy.\n */\nexport interface ModelConfig {\n  architecture: BodyPixArchitecture;\n  outputStride: BodyPixOutputStride;\n  multiplier?: BodyPixMultiplier;\n  modelUrl?: string;\n  quantBytes?: BodyPixQuantBytes;\n}\n\n// The default configuration for loading MobileNetV1 based BodyPix.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 4,\n// } as ModelConfig;\n// ```\n\nconst MOBILENET_V1_CONFIG = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  quantBytes: 4,\n  multiplier: 0.75,\n} as ModelConfig;\n\nconst VALID_ARCHITECTURE: BodyPixArchitecture[] = ['MobileNetV1', 'ResNet50'];\nconst VALID_STRIDE: {[id: string]: BodyPixOutputStride[]} = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\nconst VALID_MULTIPLIER: {[id: string]: BodyPixMultiplier[]} = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nconst VALID_QUANT_BYTES: BodyPixQuantBytes[] = [1, 2, 4];\n\nfunction validateModelConfig(config: ModelConfig): ModelConfig {\n  config = config || MOBILENET_V1_CONFIG;\n\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\n        `Invalid architecture ${config.architecture}. ` +\n        `Should be one of ${VALID_ARCHITECTURE}`);\n  }\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\n        `Invalid outputStride ${config.outputStride}. ` +\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\n        `Invalid multiplier ${config.multiplier}. ` +\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\n        `Invalid quantBytes ${config.quantBytes}. ` +\n        `Should be one of ${VALID_QUANT_BYTES} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  return config;\n}\n\n/**\n * BodyPix inference is configurable using the following config dictionary.\n *\n * `flipHorizontal`: If the left-right keypoint of poses/part segmentation\n * should be flipped/mirrored horizontally. This should be set to true for\n * videos where the video is by default flipped horizontally (i.e. a webcam),\n * and you want the person & body part segmentation to be returned in the proper\n * orientation.\n *\n * `internalResolution`: Defaults to 'medium'. The internal resolution\n * percentage that the input is resized to before inference. The larger the\n * internalResolution the more accurate the model at the cost of slower\n * prediction times. Available values are 'low', 'medium', 'high', 'full', or a\n * percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n *\n * `segmentationThreshold`: The minimum that segmentation values must\n * have to be considered part of the person. Affects the generation of the\n * segmentation mask. More specifically, it is the threshold used to binarize\n * the intermediate person segmentation probability. The probability of each\n * pixel belongs to a person is in range [0, 1]. If the probability is greater\n * than the `segmentationThreshold`, it will be set to 1 otherwise 0.\n *\n */\nexport interface InferenceConfig {\n  flipHorizontal?: boolean;\n  internalResolution?: BodyPixInternalResolution;\n  segmentationThreshold?: number;\n}\n\n/**\n * Person Inference Config\n *\n * `maxDetections`: Defaults to 10. Maximum number of person pose detections per\n * image.\n *\n * `scoreThreshold`: Defaults to 0.4. Only return person pose that have root\n * part score greater or equal to this value.\n *\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\n * It needs to be strictly positive. Two pose keypoints suppress each other if\n * they are less than `nmsRadius` pixels away.\n */\nexport interface PersonInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n}\n\n/**\n * Multiple Person Instance Inference Config\n *\n * `maxDetections`: Defaults to 10. Maximum number of returned instance\n * segmentation and pose detections per image.\n *\n * `scoreThreshold`: Defaults to 0.4. Only returns and uses person\n * poses for instance segmentation assignment when the pose has root part score\n * greater or equal to this value.\n *\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\n * It needs to be strictly positive. Two parts suppress each other if they are\n * less than `nmsRadius` pixels away.\n *\n * `minKeypointScore`: Default to 0.3. Keypoints above the score are used\n * for matching and assigning segmentation mask to each person.\n *\n * `refineSteps`: Default to 10. The number of refinement steps used when\n * assigning the instance segmentation. It needs to be strictly positive. The\n * larger the higher the accuracy and slower the inference.\n *\n */\nexport interface MultiPersonInstanceInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n  minKeypointScore?: number;\n  refineSteps?: number;\n}\n\nexport const PERSON_INFERENCE_CONFIG: PersonInferenceConfig = {\n  flipHorizontal: false,\n  internalResolution: 'medium',\n  segmentationThreshold: 0.7,\n  maxDetections: 10,\n  scoreThreshold: 0.4,\n  nmsRadius: 20,\n};\n\nexport const MULTI_PERSON_INSTANCE_INFERENCE_CONFIG:\n    MultiPersonInstanceInferenceConfig = {\n      flipHorizontal: false,\n      internalResolution: 'medium',\n      segmentationThreshold: 0.7,\n      maxDetections: 10,\n      scoreThreshold: 0.4,\n      nmsRadius: 20,\n      minKeypointScore: 0.3,\n      refineSteps: 10\n    };\n\nfunction validatePersonInferenceConfig(config: PersonInferenceConfig) {\n  const {segmentationThreshold, maxDetections, scoreThreshold, nmsRadius} =\n      config;\n\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\n        `segmentationThreshold ${segmentationThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n}\n\nfunction validateMultiPersonInstanceInferenceConfig(\n    config: MultiPersonInstanceInferenceConfig) {\n  const {\n    segmentationThreshold,\n    maxDetections,\n    scoreThreshold,\n    nmsRadius,\n    minKeypointScore,\n    refineSteps\n  } = config;\n\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\n        `segmentationThreshold ${segmentationThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n\n  if (minKeypointScore < 0 || minKeypointScore > 1) {\n    throw new Error(\n        `Invalid minKeypointScore ${minKeypointScore}.` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (refineSteps <= 0 || refineSteps > 20) {\n    throw new Error(\n        `Invalid refineSteps ${refineSteps}.` +\n        `Should be in range [1, 20]`);\n  }\n}\n\nexport class BodyPix {\n  baseModel: BaseModel;\n\n  constructor(net: BaseModel) {\n    this.baseModel = net;\n  }\n\n  private predictForPersonSegmentation(input: tf.Tensor3D): {\n    segmentLogits: tf.Tensor3D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n  } {\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    };\n  }\n\n  private predictForPersonSegmentationAndPart(input: tf.Tensor3D): {\n    segmentLogits: tf.Tensor3D,\n    partHeatmapLogits: tf.Tensor3D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n  } {\n    const {\n      segmentation,\n      partHeatmaps,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      partHeatmapLogits: partHeatmaps,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    };\n  }\n\n  private predictForMultiPersonInstanceSegmentationAndPart(input: tf.Tensor3D):\n      {\n        segmentLogits: tf.Tensor3D,\n        longOffsets: tf.Tensor3D,\n        heatmapScores: tf.Tensor3D,\n        offsets: tf.Tensor3D,\n        displacementFwd: tf.Tensor3D,\n        displacementBwd: tf.Tensor3D,\n        partHeatmaps: tf.Tensor3D\n      } {\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      partHeatmaps,\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      longOffsets,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      partHeatmaps\n    };\n  }\n\n  /**\n   * Given an image with people, returns a dictionary of all intermediate\n   * tensors including: 1) a binary array with 1 for the pixels that are part of\n   * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person. Affects the generation of the\n   * segmentation mask.\n   *\n   * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\n   * and `padding`:\n   * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\n   * person, and 0 otherwise. The width and height correspond to the same\n   * dimensions of the input image.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\n   * by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  segmentPersonActivation(\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\n      segmentationThreshold = 0.5): {\n    segmentation: tf.Tensor2D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    padding: Padding,\n    internalResolutionHeightAndWidth: [number, number]\n  } {\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        internalResolution, this.baseModel.outputStride, [height, width]);\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd\n      } = this.predictForPersonSegmentation(resized);\n\n      const [resizedHeight, resizedWidth] = resized.shape;\n\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      return {\n        segmentation: toMaskTensor(\n            tf.squeeze(scaledSegmentScores), segmentationThreshold),\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      };\n    });\n    resized.dispose();\n    return {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    };\n  }\n\n  /**\n   * Given an image with many people, returns a PersonSegmentation dictionary\n   * that contains the segmentation mask for all people and a single pose.\n   *\n   * Note: The segmentation mask returned by this method covers all people but\n   * the pose works well for one person. If you want to estimate instance-level\n   * multiple person segmentation & pose for each person, use\n   * `segmentMultiPerson` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using person decoding.\n   *\n   * @return A SemanticPersonSegmentation dictionary that contains height,\n   * width, the flattened binary segmentation mask and the poses for all people.\n   * The width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the segmentation data in pixel unit.\n   * - `width`: The width of the segmentation data in pixel unit.\n   * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\n   * belongs to a person and 0 means the pixel doesn't belong to a person. The\n   * size of the array is equal to `height` x `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  async segmentPerson(\n      input: BodyPixInput,\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\n      Promise<SemanticPersonSegmentation> {\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\n\n    validatePersonInferenceConfig(config);\n\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    } =\n        this.segmentPersonActivation(\n            input, config.internalResolution, config.segmentationThreshold);\n\n    const [height, width] = segmentation.shape;\n\n    const result = await segmentation.data() as Uint8Array;\n    segmentation.dispose();\n\n    const tensorBuffers = await toTensorBuffers3D(\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        tensorBuffers;\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n\n    return {height, width, data: result, allPoses: poses};\n  }\n\n  /**\n   * Given an image with multiple people, returns an *array* of\n   * PersonSegmentation object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person segmentation & pose for each person.\n   *\n   * The model does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PersonSegmentation object, each containing a width,\n   * height, a binary array (1 for the pixels that are part of the\n   * person, and 0 otherwise) and 2D pose. The array size corresponds to the\n   * number of pixels in the image. The width and height correspond to the\n   * dimensions of the image the binary array is shaped to, which are the same\n   * dimensions of the input image.\n   */\n  async segmentMultiPerson(\n      input: BodyPixInput,\n      config: MultiPersonInstanceInferenceConfig =\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG):\n      Promise<PersonSegmentation[]> {\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\n    validateMultiPersonInstanceInferenceConfig(config);\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        config.internalResolution, this.baseModel.outputStride,\n        [height, width]);\n\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScoresRaw,\n      offsetsRaw,\n      displacementFwdRaw,\n      displacementBwdRaw,\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        longOffsets,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n      const longOffsetsResized = false;\n      let scaledLongOffsets;\n      if (longOffsetsResized) {\n        scaledLongOffsets = scaleAndCropToInputTensorShape(\n            longOffsets, [height, width], internalResolutionHeightAndWidth,\n            [[padding.top, padding.bottom], [padding.left, padding.right]],\n            APPLY_SIGMOID_ACTIVATION);\n      } else {\n        scaledLongOffsets = longOffsets;\n      }\n\n      const segmentation = toMaskTensor(\n          tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n\n      return {\n        segmentation,\n        longOffsets: scaledLongOffsets,\n        heatmapScoresRaw: heatmapScores,\n        offsetsRaw: offsets,\n        displacementFwdRaw: displacementFwd,\n        displacementBwdRaw: displacementBwd,\n      };\n    });\n\n    const tensorBuffers = await toTensorBuffers3D(\n        [heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw]);\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        tensorBuffers;\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    const instanceMasks = await decodePersonInstanceMasks(\n        segmentation, longOffsets, poses, height, width,\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\n        config.maxDetections);\n\n    resized.dispose();\n    segmentation.dispose();\n    longOffsets.dispose();\n    heatmapScoresRaw.dispose();\n    offsetsRaw.dispose();\n    displacementFwdRaw.dispose();\n    displacementBwdRaw.dispose();\n\n    return instanceMasks;\n  }\n\n  /**\n   * Given an image with many people, returns a dictionary containing: height,\n   * width, a tensor with a part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise. This does standard\n   * ImageNet pre-processing before inferring through the model.  The image\n   * should pixels should have values [0-255].\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * percentage that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person.  Affects the clipping of the colored\n   * part image.\n   *\n   * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\n   * `offsets`, and `padding`:\n   * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\n   * the pixels that are part of a corresponding body part, and -1 otherwise.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * single-person pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\n   * used by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  segmentPersonPartsActivation(\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\n      segmentationThreshold = 0.5): {\n    partSegmentation: tf.Tensor2D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    padding: Padding,\n    internalResolutionHeightAndWidth: [number, number]\n  } {\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        internalResolution, this.baseModel.outputStride, [height, width]);\n    const {\n      resized,\n      padding,\n    } = padAndResizeTo(input, internalResolutionHeightAndWidth);\n\n    const {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        partHeatmapLogits,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd\n      } = this.predictForPersonSegmentationAndPart(resized);\n\n      const [resizedHeight, resizedWidth] = resized.shape;\n\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      const scaledPartHeatmapScore = scaleAndCropToInputTensorShape(\n          partHeatmapLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n      const segmentation =\n          toMaskTensor(tf.squeeze(scaledSegmentScores), segmentationThreshold);\n      return {\n        partSegmentation:\n            decodePartSegmentation(segmentation, scaledPartHeatmapScore),\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      };\n    });\n    resized.dispose();\n    return {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    };\n  }\n\n  /**\n   * Given an image with many people, returns a PartSegmentation dictionary that\n   * contains the body part segmentation mask for all people and a single pose.\n   *\n   * Note: The body part segmentation mask returned by this method covers all\n   * people but the pose works well when there is one person. If you want to\n   * estimate instance-level multiple person body part segmentation & pose for\n   * each person, use `segmentMultiPersonParts` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using single person decoding.\n   *\n   * @return A SemanticPartSegmentation dictionary that contains height, width,\n   * the flattened binary segmentation mask and the pose for the person. The\n   * width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the person part segmentation data in pixel unit.\n   * - `width`: The width of the person part segmentation data in pixel unit.\n   * - `data`: The flattened Int32Array of person part segmentation data with a\n   * part id from 0-24 for the pixels that are part of a corresponding body\n   * part, and -1 otherwise. The size of the array is equal to `height` x\n   * `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  async segmentPersonParts(\n      input: BodyPixInput,\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\n      Promise<SemanticPartSegmentation> {\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\n\n    validatePersonInferenceConfig(config);\n    const {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    } =\n        this.segmentPersonPartsActivation(\n            input, config.internalResolution, config.segmentationThreshold);\n\n    const [height, width] = partSegmentation.shape;\n    const data = await partSegmentation.data() as Int32Array;\n    partSegmentation.dispose();\n\n    const tensorBuffers = await toTensorBuffers3D(\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        tensorBuffers;\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n\n    return {height, width, data, allPoses: poses};\n  }\n\n  /**\n   * Given an image with multiple people, returns an *array* of PartSegmentation\n   * object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person body part segmentation & pose for each\n   * person.\n   *\n   * This does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PartSegmentation object, each containing a width,\n   * height, a flattened array (with part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\n   * and height correspond to the dimensions of the image. Each flattened part\n   * segmentation array size is equal to `height` x `width`.\n   */\n  async segmentMultiPersonParts(\n      input: BodyPixInput,\n      config: MultiPersonInstanceInferenceConfig =\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG): Promise<PartSegmentation[]> {\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\n\n    validateMultiPersonInstanceInferenceConfig(config);\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        config.internalResolution, this.baseModel.outputStride,\n        [height, width]);\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScoresRaw,\n      offsetsRaw,\n      displacementFwdRaw,\n      displacementBwdRaw,\n      partSegmentation,\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        longOffsets,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n        partHeatmaps\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\n\n      // decoding with scaling.\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      // decoding with scaling.\n      const scaledPartSegmentationScores = scaleAndCropToInputTensorShape(\n          partHeatmaps, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      const scaledLongOffsets = longOffsets;\n      const segmentation = toMaskTensor(\n        tf.squeeze(scaledSegmentScores), config.segmentationThreshold);\n      const partSegmentation =\n          decodeOnlyPartSegmentation(scaledPartSegmentationScores);\n      return {\n        segmentation,\n        longOffsets: scaledLongOffsets,\n        heatmapScoresRaw: heatmapScores,\n        offsetsRaw: offsets,\n        displacementFwdRaw: displacementFwd,\n        displacementBwdRaw: displacementBwd,\n        partSegmentation\n      };\n    });\n\n    const tensorBuffers = await toTensorBuffers3D(\n        [heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw]);\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        tensorBuffers;\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    const instanceMasks = await decodePersonInstancePartMasks(\n        segmentation, longOffsets, partSegmentation, poses, height, width,\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\n        config.maxDetections);\n\n    resized.dispose();\n    segmentation.dispose();\n    longOffsets.dispose();\n    heatmapScoresRaw.dispose();\n    offsetsRaw.dispose();\n    displacementFwdRaw.dispose();\n    displacementBwdRaw.dispose();\n    partSegmentation.dispose();\n\n    return instanceMasks;\n  }\n\n  public dispose() {\n    this.baseModel.dispose();\n  }\n}\n\n/**\n * Loads the MobileNet BodyPix model.\n */\nasync function loadMobileNet(config: ModelConfig): Promise<BodyPix> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  const multiplier = config.multiplier;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = mobileNetSavedModel(outputStride, multiplier, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const mobilenet = new MobileNet(graphModel, outputStride);\n  return new BodyPix(mobilenet);\n}\n\n/**\n * Loads the ResNet BodyPix model.\n */\nasync function loadResNet(config: ModelConfig): Promise<BodyPix> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = resNet50SavedModel(outputStride, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const resnet = new ResNet(graphModel, outputStride);\n  return new BodyPix(resnet);\n}\n\n/**\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the BodyPix loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\n    Promise<BodyPix> {\n  config = validateModelConfig(config);\n  if (config.architecture === 'ResNet50') {\n    return loadResNet(config);\n  } else if (config.architecture === 'MobileNetV1') {\n    return loadMobileNet(config);\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {cpuBlur} from './blur';\nimport {Color, PartSegmentation, PersonSegmentation} from './types';\nimport {SemanticPartSegmentation, SemanticPersonSegmentation} from './types';\nimport {getInputSize} from './util';\n\nexport type Canvas = HTMLCanvasElement | OffscreenCanvas;\n\nconst offScreenCanvases: {[name: string]: Canvas} = {};\n\ntype ImageType = HTMLImageElement|HTMLVideoElement|Canvas;\ntype HasDimensions = {\n  width: number,\n  height: number\n};\n\nfunction isSafari() {\n  return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n}\n\nfunction assertSameDimensions(\n    {width: widthA, height: heightA}: HasDimensions,\n    {width: widthB, height: heightB}: HasDimensions, nameA: string,\n    nameB: string) {\n  if (widthA !== widthB || heightA !== heightB) {\n    throw new Error(`error: dimensions must match. ${nameA} has dimensions ${\n        widthA}x${heightA}, ${nameB} has dimensions ${widthB}x${heightB}`);\n  }\n}\n\nfunction flipCanvasHorizontal(canvas: Canvas) {\n  const ctx = canvas.getContext('2d');\n  ctx.scale(-1, 1);\n  ctx.translate(-canvas.width, 0);\n}\n\nfunction drawWithCompositing(\n    ctx: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D,\n    image: Canvas|ImageType,\n    compositeOperation: string) {\n  ctx.globalCompositeOperation = compositeOperation;\n  ctx.drawImage(image, 0, 0);\n}\n\nfunction createOffScreenCanvas(): Canvas {\n  if (typeof document !== 'undefined' ) {\n    return document.createElement('canvas');\n  } else if (typeof OffscreenCanvas !== 'undefined') {\n    return new OffscreenCanvas(0, 0);\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction ensureOffscreenCanvasCreated(id: string): Canvas {\n  if (!offScreenCanvases[id]) {\n    offScreenCanvases[id] = createOffScreenCanvas();\n  }\n  return offScreenCanvases[id];\n}\n\nfunction drawAndBlurImageOnCanvas(\n    image: ImageType, blurAmount: number, canvas: Canvas) {\n  const {height, width} = image;\n  const ctx = canvas.getContext('2d');\n  canvas.width = width;\n  canvas.height = height;\n  ctx.clearRect(0, 0, width, height);\n  ctx.save();\n  if (isSafari()) {\n    cpuBlur(canvas, image, blurAmount);\n  } else {\n    // tslint:disable:no-any\n    (ctx as any).filter = `blur(${blurAmount}px)`;\n    ctx.drawImage(image, 0, 0, width, height);\n  }\n  ctx.restore();\n}\n\nfunction drawAndBlurImageOnOffScreenCanvas(\n    image: ImageType, blurAmount: number,\n    offscreenCanvasName: string): Canvas {\n  const canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\n  if (blurAmount === 0) {\n    renderImageToCanvas(image, canvas);\n  } else {\n    drawAndBlurImageOnCanvas(image, blurAmount, canvas);\n  }\n  return canvas;\n}\n\nfunction renderImageToCanvas(image: ImageType, canvas: Canvas) {\n  const {width, height} = image;\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0, width, height);\n}\n/**\n * Draw an image on a canvas\n */\nfunction renderImageDataToCanvas(image: ImageData, canvas: Canvas) {\n  canvas.width = image.width;\n  canvas.height = image.height;\n  const ctx = canvas.getContext('2d');\n\n  ctx.putImageData(image, 0, 0);\n}\n\nfunction renderImageDataToOffScreenCanvas(\n    image: ImageData, canvasName: string): Canvas {\n  const canvas = ensureOffscreenCanvasCreated(canvasName);\n  renderImageDataToCanvas(image, canvas);\n\n  return canvas;\n}\n\n/**\n * Given the output from estimating multi-person segmentation, generates an\n * image with foreground and background color at each pixel determined by the\n * corresponding binary segmentation value at the pixel from the output.  In\n * other words, pixels where there is a person will be colored with foreground\n * color and where there is not a person will be colored with background color.\n *\n * @param personOrPartSegmentation The output from\n * `segmentPerson`, `segmentMultiPerson`,\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\n *\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\n * (r,g,b,a) for visualizing pixels that belong to people.\n *\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\n * (r,g,b,a) for visualizing pixels that don't belong to people.\n *\n * @param drawContour Default to false. Whether to draw the contour around each\n * person's segmentation mask or body part mask.\n *\n * @param foregroundIds Default to [1]. The integer values that represent\n * foreground. For person segmentation, 1 is the foreground. For body part\n * segmentation, it can be a subset of all body parts ids.\n *\n * @returns An ImageData with the same width and height of\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\n * transparency at each pixel determined by the corresponding binary\n * segmentation value at the pixel from the output.\n */\nexport function toMask(\n    personOrPartSegmentation: SemanticPersonSegmentation|\n    SemanticPartSegmentation|PersonSegmentation[]|PartSegmentation[],\n    foreground: Color = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0\n    },\n    background: Color = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 255\n    },\n    drawContour = false, foregroundIds: number[] = [1]): ImageData {\n  if (Array.isArray(personOrPartSegmentation) &&\n      personOrPartSegmentation.length === 0) {\n    return null;\n  }\n\n  let multiPersonOrPartSegmentation:\n      Array<SemanticPersonSegmentation|SemanticPartSegmentation|\n            PersonSegmentation|PartSegmentation>;\n\n  if (!Array.isArray(personOrPartSegmentation)) {\n    multiPersonOrPartSegmentation = [personOrPartSegmentation];\n  } else {\n    multiPersonOrPartSegmentation = personOrPartSegmentation;\n  }\n\n  const {width, height} = multiPersonOrPartSegmentation[0];\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  function drawStroke(\n      bytes: Uint8ClampedArray, row: number, column: number, width: number,\n      radius: number, color: Color = {r: 0, g: 255, b: 255, a: 255}) {\n    for (let i = -radius; i <= radius; i++) {\n      for (let j = -radius; j <= radius; j++) {\n        if (i !== 0 && j !== 0) {\n          const n = (row + i) * width + (column + j);\n          bytes[4 * n + 0] = color.r;\n          bytes[4 * n + 1] = color.g;\n          bytes[4 * n + 2] = color.b;\n          bytes[4 * n + 3] = color.a;\n        }\n      }\n    }\n  }\n\n  function isSegmentationBoundary(\n      segmentationData: Uint8Array|Int32Array,\n      row: number,\n      column: number,\n      width: number,\n      foregroundIds: number[] = [1],\n      radius = 1,\n      ): boolean {\n    let numberBackgroundPixels = 0;\n    for (let i = -radius; i <= radius; i++) {\n      for (let j = -radius; j <= radius; j++) {\n        if (i !== 0 && j !== 0) {\n          const n = (row + i) * width + (column + j);\n          if (!foregroundIds.some(id => id === segmentationData[n])) {\n            numberBackgroundPixels += 1;\n          }\n        }\n      }\n    }\n    return numberBackgroundPixels > 0;\n  }\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      bytes[4 * n + 0] = background.r;\n      bytes[4 * n + 1] = background.g;\n      bytes[4 * n + 2] = background.b;\n      bytes[4 * n + 3] = background.a;\n      for (let k = 0; k < multiPersonOrPartSegmentation.length; k++) {\n        if (foregroundIds.some(\n                id => id === multiPersonOrPartSegmentation[k].data[n])) {\n          bytes[4 * n] = foreground.r;\n          bytes[4 * n + 1] = foreground.g;\n          bytes[4 * n + 2] = foreground.b;\n          bytes[4 * n + 3] = foreground.a;\n          const isBoundary = isSegmentationBoundary(\n              multiPersonOrPartSegmentation[k].data, i, j, width,\n              foregroundIds);\n          if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 &&\n              j + 1 < width && isBoundary) {\n            drawStroke(bytes, i, j, width, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return new ImageData(bytes, width, height);\n}\n\nconst RAINBOW_PART_COLORS: Array<[number, number, number]> = [\n  [110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167],\n  [238, 67, 149], [255, 78, 125], [255, 94, 99],  [255, 115, 75],\n  [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64],\n  [175, 240, 91], [135, 245, 87], [96, 247, 96],  [64, 243, 115],\n  [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213],\n  [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]\n];\n\n/**\n * Given the output from person body part segmentation (or multi-person\n * instance body part segmentation) and an array of colors indexed by part id,\n * generates an image with the corresponding color for each part at each pixel,\n * and white pixels where there is no part.\n *\n * @param partSegmentation The output from segmentPersonParts\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\n * object and later is an array of PartSegmentation object.\n *\n * @param partColors A multi-dimensional array of rgb colors indexed by\n * part id.  Must have 24 colors, one for every part.\n *\n * @returns An ImageData with the same width and height of all the element in\n * multiPersonPartSegmentation, with the corresponding color for each part at\n * each pixel, and black pixels where there is no part.\n */\nexport function toColoredPartMask(\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    partColors: Array<[number, number, number]> =\n        RAINBOW_PART_COLORS): ImageData {\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    return null;\n  }\n\n  let multiPersonPartSegmentation;\n  if (!Array.isArray(partSegmentation)) {\n    multiPersonPartSegmentation = [partSegmentation];\n  } else {\n    multiPersonPartSegmentation = partSegmentation;\n  }\n  const {width, height} = multiPersonPartSegmentation[0];\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    // invert mask.  Invert the segmentation mask.\n    const j = i * 4;\n    bytes[j + 0] = 255;\n    bytes[j + 1] = 255;\n    bytes[j + 2] = 255;\n    bytes[j + 3] = 255;\n    for (let k = 0; k < multiPersonPartSegmentation.length; k++) {\n      const partId = multiPersonPartSegmentation[k].data[i];\n      if (partId !== -1) {\n        const color = partColors[partId];\n        if (!color) {\n          throw new Error(`No color could be found for part id ${partId}`);\n        }\n        bytes[j + 0] = color[0];\n        bytes[j + 1] = color[1];\n        bytes[j + 2] = color[2];\n        bytes[j + 3] = 255;\n      }\n    }\n  }\n  return new ImageData(bytes, width, height);\n}\n\nconst CANVAS_NAMES = {\n  blurred: 'blurred',\n  blurredMask: 'blurred-mask',\n  mask: 'mask',\n  lowresPartMask: 'lowres-part-mask',\n};\n\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toMask or toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n */\nexport function drawMask(\n    canvas: Canvas, image: ImageType, maskImage: ImageData|null,\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false) {\n  const [height, width] = getInputSize(image);\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n\n  ctx.drawImage(image, 0, 0);\n\n  ctx.globalAlpha = maskOpacity;\n  if (maskImage) {\n    assertSameDimensions({width, height}, maskImage, 'image', 'mask');\n\n    const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n\n    const blurredMask = drawAndBlurImageOnOffScreenCanvas(\n        mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n    ctx.drawImage(blurredMask, 0, 0, width, height);\n  }\n  ctx.restore();\n}\n\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * pixelated mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n *\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\n */\nexport function drawPixelatedMask(\n    canvas: Canvas, image: ImageType, maskImage: ImageData,\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false,\n    pixelCellWidth = 10.0) {\n  const [height, width] = getInputSize(image);\n  assertSameDimensions({width, height}, maskImage, 'image', 'mask');\n\n  const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n  const blurredMask = drawAndBlurImageOnOffScreenCanvas(\n      mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n\n  canvas.width = blurredMask.width;\n  canvas.height = blurredMask.height;\n\n  const ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n\n  const offscreenCanvas =\n      ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\n  const offscreenCanvasCtx = offscreenCanvas.getContext('2d');\n  offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\n  offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\n  offscreenCanvasCtx.drawImage(\n      blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0,\n      offscreenCanvas.width, offscreenCanvas.height);\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(\n      offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0,\n      0, canvas.width, canvas.height);\n\n  // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\n  for (let i = 0; i < offscreenCanvas.width; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(pixelCellWidth * i, 0);\n    ctx.lineTo(pixelCellWidth * i, canvas.height);\n    ctx.stroke();\n  }\n\n  // Draws horizontal grid lines that are `pixelCellWidth` apart from each\n  // other.\n  for (let i = 0; i < offscreenCanvas.height; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(0, pixelCellWidth * i);\n    ctx.lineTo(canvas.width, pixelCellWidth * i);\n    ctx.stroke();\n  }\n\n  ctx.globalAlpha = 1.0 - maskOpacity;\n  ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\n  ctx.restore();\n}\n\nfunction createPersonMask(\n    multiPersonSegmentation: PersonSegmentation[]|SemanticPersonSegmentation,\n    edgeBlurAmount: number): Canvas {\n  const backgroundMaskImage = toMask(\n      multiPersonSegmentation, {r: 0, g: 0, b: 0, a: 255},\n      {r: 0, g: 0, b: 0, a: 0});\n\n  const backgroundMask =\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param personSegmentation A SemanticPersonSegmentation or an array of\n * PersonSegmentation object.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nexport function drawBokehEffect(\n    canvas: Canvas, image: ImageType,\n    multiPersonSegmentation: SemanticPersonSegmentation|PersonSegmentation[],\n    backgroundBlurAmount = 3, edgeBlurAmount = 3, flipHorizontal = false) {\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n\n  const ctx = canvas.getContext('2d');\n\n  if (Array.isArray(multiPersonSegmentation) &&\n      multiPersonSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n\n  const personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\n\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  const [height, width] = getInputSize(image);\n  ctx.drawImage(image, 0, 0, width, height);\n\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, personMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\n\nfunction createBodyPartMask(\n    multiPersonPartSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    bodyPartIdsToMask: number[], edgeBlurAmount: number): Canvas {\n  const backgroundMaskImage = toMask(\n      multiPersonPartSegmentation, {r: 0, g: 0, b: 0, a: 0},\n      {r: 0, g: 0, b: 0, a: 255}, true, bodyPartIdsToMask);\n\n  const backgroundMask =\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param partSegmentation A SemanticPartSegmentation or an array of\n * PartSegmentation object.\n *\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\n * array of body part ids to blur. Each must be one of the 24 body part ids.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nexport function blurBodyPart(\n    canvas: Canvas, image: ImageType,\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    bodyPartIdsToBlur = [0, 1], backgroundBlurAmount = 3, edgeBlurAmount = 3,\n    flipHorizontal = false) {\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n\n  const ctx = canvas.getContext('2d');\n\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n  const bodyPartMask =\n      createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\n\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  const [height, width] = getInputSize(image);\n  ctx.drawImage(image, 0, 0, width, height);\n\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, bodyPartMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// method copied from bGlur in https://codepen.io/zhaojun/pen/zZmRQe\nexport function cpuBlur(\n    canvas: HTMLCanvasElement|OffscreenCanvas,\n    image: HTMLImageElement|HTMLVideoElement|HTMLCanvasElement|OffscreenCanvas,\n    blur: number) {\n  const ctx = canvas.getContext('2d');\n\n  let sum = 0;\n  const delta = 5;\n  const alphaLeft = 1 / (2 * Math.PI * delta * delta);\n  const step = blur < 3 ? 1 : 2;\n  for (let y = -blur; y <= blur; y += step) {\n    for (let x = -blur; x <= blur; x += step) {\n      const weight =\n          alphaLeft * Math.exp(-(x * x + y * y) / (2 * delta * delta));\n      sum += weight;\n    }\n  }\n  for (let y = -blur; y <= blur; y += step) {\n    for (let x = -blur; x <= blur; x += step) {\n      ctx.globalAlpha = alphaLeft *\n          Math.exp(-(x * x + y * y) / (2 * delta * delta)) / sum * blur;\n      ctx.drawImage(image, x, y);\n    }\n  }\n  ctx.globalAlpha = 1;\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nexport const PART_CHANNELS: string[] = [\n  'left_face',\n  'right_face',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'left_lower_arm_front',\n  'left_lower_arm_back',\n  'right_lower_arm_front',\n  'right_lower_arm_back',\n  'left_hand',\n  'right_hand',\n  'torso_front',\n  'torso_back',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'right_upper_leg_front',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_lower_leg_back',\n  'right_lower_leg_front',\n  'right_lower_leg_back',\n  'left_feet',\n  'right_feet'\n];\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.2.0';\nexport {version};\n"],"names":["toFlattenedOneHotPartMap","partHeatmapScores","numParts","shape","partMapLocations","tf.argMax","partMapFlattened","tf.reshape","tf.oneHot","toMaskTensor","segmentScores","threshold","tf.tidy","tf.cast","tf.greater","tf.scalar","decodePartSegmentation","segmentationMask","_a","partMapHeight","partMapWidth","image","mask","flattenedMap","partNumbers","tf.expandDims","tf.range","tf.matMul","partMap","partMapShiftedUpForClipping","tf.add","tf.sub","tf.mul","model","outputStride","this","inputShape","inputs","tf.util","assert","BaseModel","input","asFloat","_this","preprocessInput","asBatch","results3d","predict","map","y","tf.squeeze","namedResults","nameOutputResults","heatmapScores","tf.sigmoid","heatmap","offsets","displacementFwd","displacementBwd","segmentation","partHeatmaps","longOffsets","partOffsets","dispose","__extends","MobileNet","tf.div","results","PART_NAMES","NUM_KEYPOINTS","length","PART_IDS","reduce","result","jointName","i","jointNameA","jointNameB","getScale","_b","padding","height","width","inputResolutionY","inputResolutionX","padT","padB","getOffsetPoint","x","keypoint","get","getImageCoords","part","heatmapX","heatmapY","clamp","a","min","max","addVectors","b","computeDistance","embedding","pose","minPartScore","distance","numKpt","p","keypoints","score","Math","position","Infinity","getEmbedding","location","keypointIndex","convertToPosition","outputResolutionX","refineSteps","newLocation","nn","dy","dx","t","newPos","nn_1","matchEmbeddingToInstance","poses","numKptForMatching","_c","stride","padL","scaleX","scaleY","embed","pair","round","convertToPositionInOuput","keypointsIndex","push","kMin","kMinDist","k","dist","getOutputResolution","decodeMultipleMasksWebGl","posesAboveScore","minKptScore","maxNumPeople","inHeight","inWidth","origHeight","origWidth","slice","outHeight","outWidth","shapedLongOffsets","poseVals","Float32Array","fill","poseOffset","kp","offset","_d","posesTensor","tf.tensor","program","variableNames","outputShape","userCode","tf.backend","compileAndRun","isWebGlBackend","getBackend","decodePersonInstanceMasks","minPoseScore","minKeypointScore","filter","personSegmentations","masksTensorInfo","masksTensor","tf.engine","makeTensorFromDataId","dataId","dtype","_","tf.equal","toPersonKSegmentation","Promise","all","data","personSegmentationsData","forEach","segmentationsData","longOffsetsData","dataArrays","Uint8Array","j","n","decodeMultipleMasksCPU","decodePersonInstancePartMasks","partSegmentation","partSegmentations","bodyParts","toPersonKPartSegmentation","partSegmentationsByPersonData","partSegmentaionData","partSegmentaion","Int32Array","decodeMultiplePartMasksCPU","half","floor","maxSize","getElementValue","priorityQueue","Array","numberOfElements","MaxHeap","swim","exchange","sink","less","getValueAt","scoreIsMaximumInLocalWindow","keypointId","localMaximumRadius","scores","localMaximum","yStart","yEnd","yCurrent","xStart","xEnd","xCurrent","parentChildrenTuples","parentJoinName","childJoinName","parentToChildEdges","childToParentEdges","getStridedIndexNearPoint","point","traverseToTargetKeypoint","edgeId","sourceKeypoint","targetKeypointId","scoresBuffer","displacements","offsetRefineStep","displacement","numEdges","getDisplacement","targetKeypoint","targetKeypointIndices","offsetPoint","targetKeyPointIndices","decodePose","root","displacementsFwd","displacementsBwd","instanceKeypoints","rootPart","rootScore","rootPoint","id","edge","sourceKeypointId","withinNmsRadiusOfCorrespondingPoint","squaredNmsRadius","some","y1","x1","y2","x2","correspondingKeypoint","getInstanceScore","existingPoses","kLocalMaximumRadius","decodeMultiplePoses","offsetsBuffer","displacementsFwdBuffer","displacementsBwdBuffer","maxPoseDetections","scoreThreshold","nmsRadius","queue","numKeypoints","enqueue","buildPartWithScoreQueue","empty","dequeue","imageNetMean","ResNet","RESNET50_BASE_URL","MOBILENET_BASE_URL","getInputSize","HTMLCanvasElement","OffscreenCanvas","HTMLImageElement","offsetHeight","offsetWidth","Error","getSizeFromImageLikeElement","ImageData","HTMLVideoElement","hasAttribute","videoHeight","videoWidth","getSizeFromVideoElement","tf.Tensor","toValidInputResolution","inputResolution","resolution","isValidInputResolution","INTERNAL_RESOLUTION_STRING_OPTIONS","low","medium","high","full","INTERNAL_RESOLUTION_PERCENTAGES","MIN_INTERNAL_RESOLUTION","MAX_INTERNAL_RESOLUTION","toInputResolutionHeightAndWidth","internalResolution","inputHeight","inputWidth","internalResolutionPercentage","Object","values","join","toInternalResolutionPercentage","scaleAndCropToInputTensorShape","tensor","applySigmoidActivation","inputTensorHeight","inputTensorWidth","resizedAndPaddedHeight","resizedAndPaddedWidth","_e","padR","inResizedAndPadded","tf.image","resizeBilinear","resizedAndPadded","originalHeight","originalWidth","batchedImage","cropAndResize","removePaddingAndResizeBack","padAndResizeTo","targetH","targetW","targetAspect","resized","imageTensor","tf.browser","fromPixels","toInputTensor","tf.pad3d","top","left","right","bottom","toTensorBuffers3D","tensors","buffer","flipPoseHorizontal","imageWidth","scaleAndFlipPoses","flipHorizontal","inputResolutionHeight","inputResolutionWidth","scaledPoses","offsetY","offsetX","scalePose","scalePoses","flipPosesHorizontal","MOBILENET_V1_CONFIG","architecture","quantBytes","multiplier","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_MULTIPLIER","VALID_QUANT_BYTES","PERSON_INFERENCE_CONFIG","segmentationThreshold","maxDetections","MULTI_PERSON_INSTANCE_INFERENCE_CONFIG","validatePersonInferenceConfig","config","validateMultiPersonInstanceInferenceConfig","net","baseModel","BodyPix","segmentLogits","partHeatmapLogits","internalResolutionHeightAndWidth","predictForPersonSegmentation","resizedHeight","resizedWidth","scaledSegmentScores","segmentPersonActivation","tensorBuffers","scoresBuf","offsetsBuf","displacementsFwdBuf","displacementsBwdBuf","allPoses","scaledLongOffsets","predictForMultiPersonInstanceSegmentationAndPart","heatmapScoresRaw","offsetsRaw","displacementFwdRaw","displacementBwdRaw","instanceMasks","predictForPersonSegmentationAndPart","scaledPartHeatmapScore","segmentPersonPartsActivation","scaledPartSegmentationScores","decodeOnlyPartSegmentation","loadMobileNet","tf","url","toStr","1","0.75","0.5","graphJson","mobileNetSavedModel","tfconv.loadGraphModel","modelUrl","graphModel","mobilenet","loadResNet","resNet50SavedModel","resnet","offScreenCanvases","assertSameDimensions","nameA","nameB","widthA","heightA","widthB","heightB","flipCanvasHorizontal","canvas","ctx","getContext","scale","translate","drawWithCompositing","compositeOperation","globalCompositeOperation","drawImage","ensureOffscreenCanvasCreated","document","createElement","createOffScreenCanvas","drawAndBlurImageOnCanvas","blurAmount","clearRect","save","test","navigator","userAgent","blur","sum","alphaLeft","PI","step","exp","globalAlpha","cpuBlur","restore","drawAndBlurImageOnOffScreenCanvas","offscreenCanvasName","renderImageToCanvas","renderImageDataToOffScreenCanvas","canvasName","putImageData","renderImageDataToCanvas","toMask","personOrPartSegmentation","foreground","background","drawContour","foregroundIds","r","g","isArray","multiPersonOrPartSegmentation","bytes","Uint8ClampedArray","drawStroke","row","column","radius","color","isSegmentationBoundary","segmentationData","numberBackgroundPixels","n_1","isBoundary","RAINBOW_PART_COLORS","CANVAS_NAMES","blurred","blurredMask","lowresPartMask","indexOf","validateModelConfig","bodyPartIdsToBlur","backgroundBlurAmount","edgeBlurAmount","blurredImage","bodyPartMask","multiPersonPartSegmentation","bodyPartIdsToMask","backgroundMask","createBodyPartMask","multiPersonSegmentation","personMask","createPersonMask","maskImage","maskOpacity","maskBlurAmount","pixelCellWidth","offscreenCanvas","offscreenCanvasCtx","imageSmoothingEnabled","beginPath","strokeStyle","moveTo","lineTo","stroke","partColors","partId","resizeW","resizeH","aspect","padHeight","ceil","padWidth","tf.reverse","paddedBy"],"mappings":"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"}